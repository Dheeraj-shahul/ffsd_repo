<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Domestic Workers Services - RentEase</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        --primary-color: #ffc107;
        --secondary-color: #282828;
        --text-color: #333;
        --light-gray: #f5f5f5;
        --medium-gray: #ddd;
        --dark-gray: #888;
        --white: #fff;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
      }

      body {
        background-color: var(--light-gray);
        color: var(--text-color);
      }

      main {
        position: relative;
        top: 10vh;
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
        margin-top: 60px;
      }

      .page-title {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: var(--secondary-color);
      }

      .filter-toggle-btn {
        display: none;
      }

      .filter-container {
        background-color: var(--white);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      }

      .filter-title {
        color: var(--primary-color);
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 1rem;
        padding-left: 0.5rem;
        border-left: 4px solid var(--primary-color);
      }

      .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
      }

      .filter-item {
        flex: 1;
        min-width: 200px;
      }

      .filter-item label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        color: var(--secondary-color);
      }

      .filter-item select,
      .filter-item input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--medium-gray);
        border-radius: 4px;
        font-size: 0.9rem;
      }

      .filter-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1rem;
      }

      .filter-buttons button {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
      }

      .apply-btn {
        background-color: var(--primary-color);
        color: var(--secondary-color);
      }

      .clear-btn {
        background-color: var(--light-gray);
        color: var(--secondary-color);
      }

      .page-layout {
        display: flex;
        gap: 2rem;
        margin-top: 2rem;
      }

      .filters-sidebar {
        width: 300px;
        flex-shrink: 0;
      }

      .main-content {
        flex: 1;
      }

      .workers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
      }

      .worker-card {
        background-color: var(--white);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
      }

      .worker-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
      }

      .worker-image {
        height: 180px;
        background-color: var(--medium-gray);
        position: relative;
        overflow: hidden;
      }

      .worker-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .worker-service-type {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: var(--primary-color);
        color: var(--secondary-color);
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: bold;
      }

      .worker-rating {
        position: absolute;
        bottom: 10px;
        right: 10px;
        background-color: var(--secondary-color);
        color: var(--white);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 0.25rem;
      }

      .worker-rating span {
        color: var(--primary-color);
      }

      .worker-details {
        padding: 1rem;
      }

      .worker-name {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: var(--secondary-color);
      }

      .worker-location {
        color: var(--dark-gray);
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
      }

      .worker-price {
        font-weight: bold;
        color: var(--secondary-color);
        margin-bottom: 0.5rem;
      }

      .worker-experience {
        font-size: 0.9rem;
        color: var(--dark-gray);
        margin-bottom: 1rem;
      }

      .view-details-btn {
        display: block;
        width: 100%;
        padding: 0.75rem;
        background-color: var(--primary-color);
        color: var(--secondary-color);
        text-align: center;
        border: none;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
        text-decoration: none;
      }

      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
      }

      .modal-content {
        background-color: var(--white);
        margin: 5% auto;
        padding: 2rem;
        width: 80%;
        max-width: 800px;
        border-radius: 8px;
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
      }

      .close {
        position: absolute;
        right: 1.5rem;
        top: 1.5rem;
        font-size: 1.5rem;
        font-weight: bold;
        cursor: pointer;
      }

      .worker-modal-header {
        display: flex;
        margin-bottom: 1.5rem;
      }

      .worker-modal-image {
        width: 250px;
        height: 250px;
        border-radius: 8px;
        overflow: hidden;
        margin-right: 1.5rem;
      }

      .worker-modal-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .worker-modal-title {
        flex: 1;
      }

      .worker-modal-name {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--secondary-color);
        margin-bottom: 0.5rem;
      }

      .worker-modal-services {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
      }

      .worker-modal-service {
        background-color: var(--light-gray);
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.8rem;
      }

      .worker-modal-location {
        color: var(--dark-gray);
        margin-bottom: 0.5rem;
      }

      .worker-modal-stats {
        display: flex;
        gap: 2rem;
        margin-bottom: 1rem;
      }

      .worker-modal-stat {
        display: flex;
        flex-direction: column;
      }

      .worker-modal-stat-value {
        font-weight: bold;
        color: var(--secondary-color);
        font-size: 1.2rem;
      }

      .worker-modal-stat-label {
        font-size: 0.8rem;
        color: var(--dark-gray);
      }

      .worker-modal-description {
        margin-bottom: 1.5rem;
      }

      .worker-modal-book-btn {
        background-color: var(--primary-color);
        color: var(--secondary-color);
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
      }

      .section-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--secondary-color);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--medium-gray);
      }

      .reviews-container {
        margin-top: 2rem;
      }

      .review-item {
        border-bottom: 1px solid var(--medium-gray);
        padding: 1rem 0;
      }

      .review-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
      }

      .review-user {
        font-weight: bold;
        color: var(--secondary-color);
      }

      .review-rating {
        color: var(--primary-color);
      }

      .review-date {
        font-size: 0.8rem;
        color: var(--dark-gray);
        margin-bottom: 0.5rem;
      }

      .availability-container {
        margin-top: 2rem;
      }

      .availability-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0.5rem;
        margin-bottom: 1rem;
      }

      .day-label {
        text-align: center;
        font-weight: bold;
        color: var(--secondary-color);
        margin-bottom: 0.5rem;
      }

      .time-slot {
        background-color: var(--light-gray);
        padding: 0.5rem;
        border-radius: 4px;
        text-align: center;
        font-size: 0.9rem;
      }

      .time-slot.available {
        background-color: #e6f7e6;
        color: #2e7d32;
      }

      .time-slot.unavailable {
        background-color: #ffebee;
        color: #c62828;
        text-decoration: line-through;
      }
      @media (max-width: 768px) {
        .page-layout {
          flex-direction: column;
          gap: 1rem;
        }

        .filters-sidebar {
          width: 70vw;
          background-color: #333;
          color: #ffc107;
          position: fixed;
          top: 0;
          left: 0;
          z-index: 1000;
          padding: 1rem;
          padding-top: 200px;
          height: 100vh;
          overflow-y: auto;
          transition: transform 0.3s ease;
          transform: translateX(-100%);
        }

        .filters-sidebar.active {
          transform: translateX(0);
          display: block;
        }

        .filter-container {
          background-color: #444;
          border-radius: 8px;
          padding: 1rem;
          margin-bottom: 1rem;
          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }

        .filter-title {
          color: #ffc107;
          border-left: 4px solid #ffc107;
        }

        .filter-toggle-btn {
          display: block;
          position: fixed;
          top: 10vh;
          left: 1rem;
          background-color: #ffc107;
          color: #333;
          padding: 0.75rem 1rem;
          border: none;
          border-radius: 4px;
          font-weight: bold;
          cursor: pointer;
          z-index: 1001;
        }

        .filter-item label {
          color: #ffc107;
        }

        .filter-item select,
        .filter-item input {
          background-color: #555;
          color: #fff;
          border: 1px solid #666;
        }

        .apply-btn {
          background-color: #ffc107;
          color: #333;
          font-weight: bold;
        }

        .clear-btn {
          background-color: #555;
          color: #ffc107;
          border: 1px solid #ffc107;
        }

        /* Rest of your media queries remain the same */
      }
    </style>
  </head>
  <body>
    <%- include('../partials/header') %>
    <button class="filter-toggle-btn" onclick="toggleFilters()">
      ☰ Filters
    </button>
    <main>
      <h1 class="page-title">Domestic Worker Services</h1>
    
      <div class="page-layout">
        <div class="filters-sidebar">
          <div class="filter-container">
            <h2 class="filter-title">Search Location</h2>
            <div class="filter-group">
              <div class="filter-item">
                <label for="location">City</label>
                <select id="location" onchange="locationChanged()">
                  <option value="">Select City</option>
                  <option value="delhi">Delhi</option>
                  <option value="mumbai">Mumbai</option>
                  <option value="bangalore">Bangalore</option>
                  <option value="chennai">Chennai</option>
                  <option value="hyderabad">Hyderabad</option>
                  <option value="kolkata">Kolkata</option>
                  <option value="pune">Pune</option>
                </select>
              </div>
              <div class="filter-item">
                <label for="area">Area</label>
                <select id="area" disabled>
                  <option value="">Select Area</option>
                </select>
              </div>
            </div>
            <div class="filter-buttons">
              <button class="apply-btn" onclick="searchLocation()">
                Search
              </button>
            </div>
          </div>
    
          <div class="filter-container">
            <h2 class="filter-title">Filters</h2>
            <div class="filter-group">
              <div class="filter-item">
                <label for="serviceType">Service Type</label>
                <select id="serviceType" onchange="serviceTypeChanged()">
                  <option value="">All Services</option>
                  <option value="Cooking">Cooking</option>
                  <option value="Cleaning">Cleaning</option>
                  <option value="Child Care">Child Care</option>
                  <option value="Gardening">Gardening</option>
                  <option value="Laundry">Laundry</option>
                </select>
              </div>
              <div class="filter-item">
                <label for="price">Price Range</label>
                <select id="price">
                  <option value="">All Prices</option>
                  <option value="0-5000">₹0 - ₹5,000</option>
                  <option value="5001-10000">₹5,001 - ₹10,000</option>
                  <option value="10001-15000">₹10,001 - ₹15,000</option>
                  <option value="15001+">₹15,001+</option>
                </select>
              </div>
              <div class="filter-item">
                <label for="rating">Minimum Rating</label>
                <select id="rating">
                  <option value="">Any Rating</option>
                  <option value="4">4+ Stars</option>
                  <option value="3">3+ Stars</option>
                  <option value="2">2+ Stars</option>
                </select>
              </div>
            </div>
            <div class="filter-buttons">
              <button class="clear-btn" onclick="clearFilters()">
                Clear Filters
              </button>
              <button class="apply-btn" onclick="applyFilters()">
                Apply Filters
              </button>
            </div>
          </div>
        </div>
        <div class="main-content">
          <div class="workers-grid" id="workersGrid"></div>
        </div>
      </div>
    
      <!-- Worker Details Modal -->
      <div id="workerModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeModal()">×</span>
          <div id="modalContent"></div>
        </div>
      </div>
    </main>
    
    <script>
    // Location data
    const areasByCity = {
      delhi: ["karol bagh", "connaught place", "dwarka", "rohini"],
      mumbai: ["andheri", "bandra", "juhu", "colaba"],
      bangalore: ["koramangala", "indiranagar", "whitefield", "jp nagar"],
      chennai: ["t nagar", "anna nagar", "adyar", "mylapore"],
      hyderabad: ["hitech city", "banjara hills", "jubilee hills", "secunderabad"],
      kolkata: ["salt lake", "park street", "howrah", "new town"],
      pune: ["koregaon park", "hinjewadi", "wakad", "baner"],
    };
    
    // Initialize the page
    document.addEventListener("DOMContentLoaded", () => {
      // Fetch workers from the server
      fetchWorkers();
    });
    
    // Fetch workers from the server
    async function fetchWorkers() {
      try {
        const response = await fetch('/api/workers');
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status}`);
        }
        const workers = await response.json();
        displayWorkers(workers);
      } catch (error) {
        console.error('Error fetching workers:', error);
        document.getElementById("workersGrid").innerHTML = '<p style="text-align: center; padding: 2rem;">Error loading workers: ' + error.message + '</p>';
      }
    }
    
    // Display workers in the grid
    function displayWorkers(workers) {
      const grid = document.getElementById("workersGrid");
      
      // Clear the grid
      grid.innerHTML = "";
      
      // Check if there are any workers
      if (!workers || workers.length === 0) {
        grid.innerHTML = '<p style="text-align: center; padding: 2rem;">No workers found</p>';
        return;
      }
      
      // Create and append worker cards
      workers.forEach((worker) => {
        const card = document.createElement("div");
        card.className = "worker-card";
        
        // Handle potential undefined values
        const firstName = worker.firstName || 'Unknown';
        const lastName = worker.lastName || '';
        const location = worker.location ? worker.location.charAt(0).toUpperCase() + worker.location.slice(1) : 'Location unknown';
        const serviceType = worker.serviceType || 'General Services';
        const experience = worker.experience || 0;
        const price = worker.price ? `₹${worker.price.toLocaleString()}` : 'Contact for price';
        const rating = worker.ratingId?.average ? worker.ratingId.average : 'N/A';
        const image = worker.image || '/images/default-worker.jpg';
        
        card.innerHTML = `
          <div class="worker-image">
            <img src="${image}" alt="${firstName} ${lastName}" onerror="this.src='/images/default-worker.jpg'">
            <div class="worker-service-type">${serviceType}</div>
            <div class="worker-rating">★ <span>${rating}</span></div>
          </div>
          <div class="worker-details">
            <h3 class="worker-name">${firstName} ${lastName}</h3>
            <p class="worker-location">📍 ${location}</p>
            <p class="worker-price">${price}/month</p>
            <p class="worker-experience">${experience} years</p>
            <button class="view-details-btn" onclick="showWorkerDetails('${worker._id}')">View Details</button>
          </div>
        `;
        
        grid.appendChild(card);
      });
    }
    
    // Update area dropdown when location changes
    function locationChanged() {
      const locationSelect = document.getElementById("location");
      const areaSelect = document.getElementById("area");
      const location = locationSelect.value;
    
      // Reset area dropdown
      areaSelect.innerHTML = '<option value="">Select Area</option>';
    
      if (!location) {
        areaSelect.disabled = true;
        return;
      }
    
      // Enable and populate area dropdown
      areaSelect.disabled = false;
      const areas = areasByCity[location] || [];
    
      areas.forEach((area) => {
        const option = document.createElement("option");
        option.value = area;
        option.textContent = area.charAt(0).toUpperCase() + area.slice(1);
        areaSelect.appendChild(option);
      });
    }
    
    // Search by location and area
    function searchLocation() {
      const location = document.getElementById("location").value.toLowerCase();
      const area = document.getElementById("area").value.toLowerCase();
    
      if (!location) {
        alert("Please select a location");
        return;
      }
      if (!area) {
        alert("Please select an area");
        return;
      }
    
      // Apply all filters
      applyFilters();
    
      // Close the sidebar on mobile
      const filtersSidebar = document.querySelector(".filters-sidebar");
      filtersSidebar.classList.remove("active");
    }
    
    // Filter workers based on selected criteria
    async function applyFilters() {
      const location = document.getElementById("location").value.toLowerCase();
      const area = document.getElementById("area").value.toLowerCase();
      const serviceType = document.getElementById("serviceType").value;
      const price = document.getElementById("price").value;
      const rating = document.getElementById("rating").value;
    
      // Build query parameters
      const queryParams = new URLSearchParams();
      if (location) queryParams.append('location', location);
      if (area) queryParams.append('area', area);
      if (serviceType) queryParams.append('serviceType', serviceType);
      if (price) queryParams.append('price', price);
      if (rating) queryParams.append('rating', rating);
    
      try {
        const response = await fetch(`/api/workers?${queryParams.toString()}`);
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status}`);
        }
        
        const filteredWorkers = await response.json();
    
        // Display results
        displayWorkers(filteredWorkers);
    
        // Close the sidebar on mobile
        const filtersSidebar = document.querySelector(".filters-sidebar");
        filtersSidebar.classList.remove("active");
      } catch (error) {
        console.error('Error applying filters:', error);
        document.getElementById("workersGrid").innerHTML = '<p style="text-align: center; padding: 2rem;">Error loading workers: ' + error.message + '</p>';
      }
    }
    
    // Clear all filters
    function clearFilters() {
      document.getElementById("location").value = "";
      document.getElementById("area").value = "";
      document.getElementById("area").disabled = true;
      document.getElementById("price").value = "";
      document.getElementById("rating").value = "";
      document.getElementById("serviceType").value = "";
      fetchWorkers(); // Reset to show all workers
    }
    
    // Placeholder for serviceTypeChanged function
    function serviceTypeChanged() {
      // This can be expanded if you need specific behavior when service type changes
    }
    
    // Show worker details modal
    async function showWorkerDetails(workerId) {
      try {
        const response = await fetch(`/api/workers/${workerId}`);
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status}`);
        }
        
        const worker = await response.json();
        const modal = document.getElementById("workerModal");
        const modalContent = document.getElementById("modalContent");
        
        // Handle potential undefined values
        const firstName = worker.firstName || 'Unknown';
        const lastName = worker.lastName || '';
        const location = worker.location ? worker.location.charAt(0).toUpperCase() + worker.location.slice(1) : 'Location unknown';
        const serviceType = worker.serviceType || 'General Services';
        const experience = worker.experience || 0;
        const price = worker.price ? `₹${worker.price.toLocaleString()}` : 'Contact for price';
        const rating = worker.ratingId?.average || 'N/A';
        const description = worker.description || 'No description available';
        const image = worker.image || '/images/default-worker.jpg';
        
        // Generate reviews HTML
        let reviewsHtml = '<p>No reviews available</p>';
        if (worker.ratingId?.reviews && worker.ratingId.reviews.length > 0) {
          reviewsHtml = worker.ratingId.reviews.map(review => `
            <div class="review-item">
              <div class="review-header">
                <span class="review-user">${review.user || 'Anonymous'}</span>
                <span class="review-rating">★ ${review.rating}</span>
              </div>
              <div class="review-date">${review.date || 'N/A'}</div>
              <p>${review.comment || 'No comment'}</p>
            </div>
          `).join('');
        }
    
        modalContent.innerHTML = `
          <div class="worker-modal-header">
            <div class="worker-modal-image">
              <img src="${image}" alt="${firstName} ${lastName}" onerror="this.src='/images/default-worker.jpg'">
            </div>
            <div class="worker-modal-title">
              <h2 class="worker-modal-name">${firstName} ${lastName}</h2>
              <div class="worker-modal-services">
                <span class="worker-modal-service">${serviceType}</span>
              </div>
              <p class="worker-modal-location">📍 ${location}</p>
              <div class="worker-modal-stats">
                <div class="worker-modal-stat">
                  <span class="worker-modal-stat-value">${price}</span>
                  <span class="worker-modal-stat-label">per month</span>
                </div>
                <div class="worker-modal-stat">
                  <span class="worker-modal-stat-value">★ ${rating}</span>
                  <span class="worker-modal-stat-label">rating</span>
                </div>
                <div class="worker-modal-stat">
                  <span class="worker-modal-stat-value">${experience} years</span>
                  <span class="worker-modal-stat-label">experience</span>
                </div>
              </div>
              <button class="worker-modal-book-btn">Book Now</button>
            </div>
          </div>
          <div class="worker-modal-description">
            <h3 class="section-title">About</h3>
            <p>${description}</p>
          </div>
          <div class="availability-container">
            <h3 class="section-title">Availability</h3>
            <div class="availability-grid">
              ${worker.availability ? 
                '<div class="time-slot available">Available</div>' : 
                '<div class="time-slot unavailable">Not Available</div>'}
            </div>
          </div>
          <div class="reviews-container">
            <h3 class="section-title">Reviews</h3>
            ${reviewsHtml}
          </div>
        `;
    
        modal.style.display = "block";
      } catch (error) {
        console.error('Error fetching worker details:', error);
        alert('Error loading worker details: ' + error.message);
      }
    }
    
    // Close modal
    function closeModal() {
      document.getElementById("workerModal").style.display = "none";
    }
    
    // Close modal when clicking outside
    window.onclick = function (event) {
      const modal = document.getElementById("workerModal");
      if (event.target == modal) {
        modal.style.display = "none";
      }
    };
    
    // Toggle filters sidebar on mobile
    function toggleFilters() {
      const filtersSidebar = document.querySelector(".filters-sidebar");
      filtersSidebar.classList.toggle("active");
    }
    </script>
  </body>
</html>
