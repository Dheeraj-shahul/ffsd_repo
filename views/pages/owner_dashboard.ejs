<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Owner Dashboard - RentEase</title>
    <link rel="stylesheet" href="css/property_owner.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <%- include('../partials/header') %>
    <button class="menu-toggle" onclick="toggleMenu()">
      <strong>></strong>
    </button>

    <div class="dashboard-container">
      <div class="sidebar">
        <h2>Owner Dashboard</h2>
        <h2 id="house_owner_name">
          Hey, <%= user?.firstName || '' %> <%= user?.lastName || '' %>
        </h2>
        <ul>
          <li onclick="showSection('properties')">
            <i class="fa-solid fa-house"></i> My Properties
          </li>
          <li onclick="showSection('tenants')">
            <i class="fa-solid fa-user"></i> My Tenants
          </li>
          <li onclick="showSection('payments')">
            <i class="fa-solid fa-hand-holding-dollar"></i> Rent Payments
          </li>
          <li onclick="showSection('maintenance')">
            <i class="fa-solid fa-screwdriver-wrench"></i> Maintenance Requests
          </li>
          <li onclick="showSection('complaints')">
            <i class="fa-solid fa-message"></i> Complaints
          </li>
          <li onclick="showSection('reports')">
            <i class="fa-solid fa-chart-column"></i> Reports & Analytics
          </li>
          <!-- <li onclick="showSection('agreements')">
            <i class="fa-solid fa-file-contract"></i> Rental Agreements
          </li> -->
          <li onclick="showSection('settings')">
            <i class="fa-solid fa-gears"></i> Settings
          </li>
          <li onclick="showSection('notifications')">
            <i class="fa-solid fa-bell"></i> Notifications
          </li>
        </ul>
      </div>

      <div class="main-content">
        <!-- Updated Property Section for owner_dashboard.ejs -->
        <div id="properties" class="section active">
          <h3>My Properties</h3>
          <div id="prop_container">
            <% if (properties && Array.isArray(properties)) { %> <%
            properties.forEach(property => { %>
            <div
              id="gs_container"
              class="after_scroll_container"
              data-property-id="<%= property._id %>"
            >
              <div class="sc_image_cotainer">
                <img
                  src="<%= property.images && property.images[0] || '/images/default.jpg' %>"
                  class="sc_image"
                />
              </div>
              <div class="main_sen">
                <%= property.name || 'Untitled Property' %>
              </div>
              <div class="sc_text">
                <div class="prop_details">
                  <ul>
                    <li>
                      <strong>Location:</strong> <%= property.address || 'N/A'
                      %>
                    </li>
                    <li>
                      <strong>City:</strong> <%= property.location || 'N/A' %>
                    </li>
                    <li>
                      <strong>Monthly Rent:</strong> ₹<%= (property.price ||
                      0).toLocaleString() %>
                    </li>
                    <li>
                      <strong>Current Status:</strong> <%= property.isRented ?
                      'Rented' : 'Vacant' %>
                    </li>
                  </ul>
                </div>
                <div id="prop_view">
                  <button
                    class="prop_button"
                    onclick="location.href='/property?id=<%=property._id%>'"
                  >
                    Property Details
                  </button>
                  <% if (property.isRented === true) { %>
                  <button class="prop_button" onclick="showSection('payments')">
                    Rent Details
                  </button>
                  <button
                    class="prop_button"
                    onclick="showSection('complaints')"
                  >
                    View Complaints
                  </button>
                  <% } %>
                  <button
                    class="delete_button"
                    onclick="showDeleteConfirmation('<%= property._id %>', <%= property.isRented %>)"
                  >
                    Delete Property
                  </button>
                </div>
              </div>
            </div>
            <% }) %> <% } else { %>
            <p>No properties available.</p>
            <% } %>
          </div>
          <button
            class="add-button"
            onclick="location.href='/property_listing_page'"
          >
            Add New Property
          </button>
        </div>

        <!-- Add the delete confirmation overlay -->
        <div id="deletePropertyOverlay" class="popup-overlay">
          <div class="delete-popup-container">
            <h4 class="delete-popup-title">Delete Property?</h4>
            <p class="delete-popup-message">
              Are you sure you want to delete this property? This action cannot
              be undone.
            </p>
            <div class="delete-popup-buttons">
              <button id="cancelDeleteProperty" class="delete-cancel-button">
                Cancel
              </button>
              <button id="confirmDeleteProperty" class="delete-confirm-button">
                Yes, Delete
              </button>
            </div>
          </div>
        </div>

        <div id="tenants" class="section">
          <h3>My Tenants</h3>
          <div class="messages">
            <% if (tenants && Array.isArray(tenants)) { %> <%
            tenants.forEach(tenant => { %>
            <div class="tentant_details">
              <ul>
                <li>
                  <strong
                    ><%= tenant.firstName || '' %> <%= tenant.lastName || ''
                    %></strong
                  >
                </li>
                <li>
                  <strong>PROPERTY:</strong>
                  <a href="/property?id=<%=tenant.propid%>"
                    ><%= tenant.property || 'N/A' %></a
                  >
                </li>
                <li><strong>Contact:</strong> <%= tenant.phone || 'N/A' %></li>
                <li><strong>Email:</strong> <%= tenant.email || 'N/A' %></li>
              </ul>
              <!-- <button class="msg_button">View Messages</button> -->
              <button class="msg_button contact_tenant_button">
                Contact Tenant
              </button>
            </div>
            <% }) %> <% } else { %>
            <p>No tenants available.</p>
            <% } %>
          </div>
        </div>

        <div id="payments" class="section">
          <h3>Rent Payments</h3>
          <p>
            Monthly Revenue:
            <strong
              >₹<%= (paymentSummary?.monthlyRevenue || 0).toLocaleString()
              %></strong
            >
          </p>
          <p>
            Upcoming Payments:
            <strong
              >₹<%= (paymentSummary?.upcomingPayments || 0).toLocaleString()
              %></strong
            >
          </p>

          <div class="payment-table-container">
            <h4>Recent Transactions</h4>
            <table class="payment-table">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Tenant</th>
                  <th>Property</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <% if (payments && Array.isArray(payments)) { %> <%
                payments.forEach(payment => { %>
                <tr>
                  <td>
                    <%= payment.paymentDate ? new
                    Date(payment.paymentDate).toLocaleDateString() : 'N/A' %>
                  </td>
                  <td><%= payment.userName || 'N/A' %></td>
                  <td><%= payment.property || 'N/A' %></td>
                  <td>₹<%= (payment.amount || 0).toLocaleString() %></td>
                  <td>
                    <span class="status-paid"
                      ><%= payment.status || 'N/A' %></span
                    >
                  </td>
                </tr>
                <% }) %> <% } else { %>
                <tr>
                  <td colspan="5">No transactions available.</td>
                </tr>
                <% } %>
              </tbody>
            </table>
          </div>

          <div class="payment-summary">
            <div class="summary-card">
              <h4>Total Revenue</h4>
              <p class="amount">
                ₹<%= (paymentSummary?.totalRevenue || 0).toLocaleString() %>
              </p>
              <p class="period">Last 2 Months</p>
            </div>
            <div class="summary-card">
              <h4>Website Commission</h4>
              <p class="amount">
                ₹<%= (paymentSummary?.commission || 0).toLocaleString() %>
              </p>
              <p class="period">5% of Revenue</p>
            </div>
            <div class="summary-card">
              <h4>Net Income</h4>
              <p class="amount">
                ₹<%= (paymentSummary?.netIncome || 0).toLocaleString() %>
              </p>
              <p class="period">After Commission</p>
            </div>
          </div>

          <!-- <button class="pay-button">View All Transactions</button>
          <button class="pay-button">Download Statement</button> -->
        </div>

        <div id="maintenance" class="section">
          <h3>Maintenance Requests</h3>
          <div class="maintenance-requests">
            <% if (maintenanceRequests && Array.isArray(maintenanceRequests)) {
            %> <% maintenanceRequests.forEach(request => { %>
            <div class="request-card" data-request-id="<%= request._id %>">
              <div class="request-header">
                <h4><%= request.issueType || 'N/A' %></h4>
                <span
                  class="request-status <%= (request.status || '').toLowerCase().replace(' ', '-') %>"
                  ><%= request.status || 'N/A' %></span
                >
              </div>
              <div class="request-details">
                <p>
                  <strong>Property:</strong> <%= request.propertyName || 'N/A'
                  %>
                </p>
                <p>
                  <strong>Tenant:</strong> <%= request.tenantName || 'N/A' %>
                </p>
                <p>
                  <strong>Date Submitted:</strong> <%= request.scheduledDate ?
                  new Date(request.scheduledDate).toLocaleDateString() : 'N/A'
                  %>
                </p>
                <p>
                  <strong>Description:</strong> <%= request.description || 'N/A'
                  %>
                </p>
              </div>
              <div class="request-actions">
                <button class="update_sts">Update Status</button>
                <button class="update_sts">Mark Resolved</button>
              </div>
            </div>
            <% }) %> <% } else { %>
            <p>No maintenance requests available.</p>
            <% } %>
          </div>
        </div>

        <div id="complaints" class="section">
          <h3>Tenant Complaints</h3>
          <div class="complaint_container">
            <% if (complaints && Array.isArray(complaints)) { %> <%
            complaints.forEach(complaint => { %>
            <div class="res_complaint">
              <ul>
                <strong><li><%= complaint.property || 'N/A' %></li></strong>
                <ul>
                  <li>
                    <strong>Issue:</strong> <%= complaint.subject || 'N/A' %>
                  </li>
                  <li>
                    <strong>Reported by:</strong> <%= complaint.reportedBy ||
                    'N/A' %>
                  </li>
                  <li>
                    <strong>Date Reported:</strong> <%= complaint.dateSubmitted
                    ? new Date(complaint.dateSubmitted).toLocaleDateString() :
                    'N/A' %>
                  </li>
                  <li>
                    <strong>Current Status:</strong> <%= complaint.status ||
                    'N/A' %>
                  </li>
                </ul>
              </ul>
              <button class="update_sts">Update Current Status</button>
              <button class="update_sts">Contact Tenant</button>
            </div>
            <% }) %> <% } else { %>
            <p>No complaints available.</p>
            <% } %>
          </div>
        </div>

        <div id="statusUpdateOverlay" class="popup-overlay">
          <div class="popup-container">
            <h4 class="popup-title">Update Status</h4>
            <div class="status-options">
              <p>Select new status:</p>
              <div class="status-option">
                <input
                  type="radio"
                  name="status"
                  id="status-pending"
                  value="pending"
                />
                <label for="status-pending">Pending</label>
              </div>
              <div class="status-option">
                <input
                  type="radio"
                  name="status"
                  id="status-inprogress"
                  value="in-progress"
                />
                <label for="status-inprogress">In Progress</label>
              </div>
              <div class="status-option">
                <input
                  type="radio"
                  name="status"
                  id="status-resolved"
                  value="resolved"
                />
                <label for="status-resolved">Resolved</label>
              </div>
            </div>
            <div class="popup-buttons">
              <button id="cancelUpdateStatus" class="cancel-button">
                Cancel
              </button>
              <button id="confirmUpdateStatus" class="confirm-button">
                Yes, Update
              </button>
            </div>
          </div>
        </div>

        <div id="markResolvedOverlay" class="popup-overlay">
          <div class="popup-container">
            <h4 class="popup-title">Mark as Resolved?</h4>
            <p class="popup-message">
              Are you sure you want to mark this request as resolved?
            </p>
            <div class="popup-buttons">
              <button id="cancelMarkResolved" class="cancel-button">
                Cancel
              </button>
              <button id="confirmMarkResolved" class="confirm-button">
                Yes, Mark Resolved
              </button>
            </div>
          </div>
        </div>

        <div id="reports" class="section">
          <h3>Reports & Analytics</h3>
          <div class="reports-summary">
            <div class="report-card">
              <h4>Monthly Revenue</h4>
              <p class="amount">
                ₹<%= (reports?.monthlyRevenue || 0).toLocaleString() %>
              </p>
              <!-- <div class="trend <%= reports?.revenueTrend?.class || '' %>">
                <%= reports?.revenueTrend?.text || 'N/A' %>
              </div> -->
            </div>
            <div class="report-card">
              <h4>Occupancy Rate</h4>
              <p class="amount"><%= reports?.occupancyRate || 0 %>%</p>
              <!-- <div class="trend <%= reports?.occupancyTrend?.class || '' %>">
                <%= reports?.occupancyTrend?.text || 'N/A' %>
              </div> -->
            </div>
            <div class="report-card">
              <h4>Maintenance Costs</h4>
              <p class="amount">
                ₹<%= (reports?.maintenanceCosts || 0).toLocaleString() %>
              </p>
              <!-- <div class="trend <%= reports?.maintenanceTrend?.class || '' %>">
                <%= reports?.maintenanceTrend?.text || 'N/A' %>
              </div> -->
            </div>
          </div>

          <!-- <div class="chart-container">
            <h4>Monthly Revenue (Last 6 Months)</h4>
            <div class="chart-placeholder">
              <div class="bar-chart">
                <% if (reports && reports.revenueChart &&
                Array.isArray(reports.revenueChart)) { %> <%
                reports.revenueChart.forEach(chart => { %>
                <div class="bar" style="height: <%= chart.height || 0 %>%">
                  <span class="value"
                    >₹<%= Number(chart.value || 0).toLocaleString('en-IN')
                    %></span
                  >
                  <span class="month"><%= chart.month || 'N/A' %></span>
                </div>
                <% }) %> <% } else { %>
                <p>No revenue data available.</p>
                <% } %>
              </div>
            </div>
          </div> -->
          <!-- 
          <button class="report-button">Generate Detailed Report</button>
          <button class="report-button">Download as PDF</button> -->
        </div>

        <div id="agreements" class="section">
          <h3>Rental Agreements</h3>
          <div class="agreements-container">
            <% if (agreements && Array.isArray(agreements)) { %> <%
            agreements.forEach(agreement => { %>
            <div class="agreement-card">
              <h4><%= agreement.title || 'N/A' %></h4>
              <ul class="agreement-details">
                <% if (agreement.status === 'Active') { %>
                <li>
                  <strong>Start Date:</strong> <%= agreement.startDate || 'N/A'
                  %>
                </li>
                <li>
                  <strong>End Date:</strong> <%= agreement.endDate || 'N/A' %>
                </li>
                <li>
                  <strong>Monthly Rent:</strong> ₹<%= (agreement.monthlyRent ||
                  0).toLocaleString() %>
                </li>
                <li>
                  <strong>Security Deposit:</strong> <%=
                  (agreement.securityDeposit || 0).toLocaleString() %>
                </li>
                <li>
                  <strong>Status:</strong>
                  <span class="active-status"
                    ><%= agreement.status || 'N/A' %></span
                  >
                </li>
                <% } else { %>
                <li>
                  <strong>Last Tenant:</strong> <%= agreement.lastTenant ||
                  'N/A' %>
                </li>
                <li>
                  <strong>Agreement Ended:</strong> <%= agreement.endDate ||
                  'N/A' %>
                </li>
                <li>
                  <strong>Property Status:</strong>
                  <span class="vacant-status"
                    ><%= agreement.status || 'N/A' %></span
                  >
                </li>
                <% } %>
              </ul>
              <div class="agreement-actions">
                <% if (agreement.status === 'Active') { %>
                <button class="prop_button">View Agreement</button>
                <button class="prop_button">Print Copy</button>
                <button class="prop_button">
                  <%= agreement.action || 'N/A' %>
                </button>
                <% } else { %>
                <button class="prop_button">Create New Agreement</button>
                <button class="prop_button">List Property</button>
                <% } %>
              </div>
            </div>
            <% }) %> <% } else { %>
            <p>No agreements available.</p>
            <% } %>
          </div>
        </div>

        <div id="settings" class="section">
          <h3>Account Settings</h3>
          <form id="settingsForm">
            <div class="settings-container">
              <div class="settings-section">
                <h4>Personal Information</h4>
                <div class="form-row">
                  <div class="form-group">
                    <label for="settingsFirstName">First Name</label>
                    <input
                      type="text"
                      id="settingsFirstName"
                      name="firstName"
                      placeholder="First name"
                      value="<%= user?.firstName || '' %>"
                    />
                    <div id="settingsFirstNameError" class="error"></div>
                  </div>
                  <div class="form-group">
                    <label for="settingsLastName">Last Name</label>
                    <input
                      type="text"
                      id="settingsLastName"
                      name="lastName"
                      placeholder="Last name"
                      value="<%= user?.lastName || '' %>"
                    />
                    <div id="settingsLastNameError" class="error"></div>
                  </div>
                </div>
                <div class="form-group">
                  <label for="settingsEmail">Email</label>
                  <input
                    type="email"
                    id="settingsEmail"
                    name="email"
                    placeholder="Enter your email"
                    value="<%= user?.email || '' %>"
                  />
                  <div id="settingsEmailError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsPhone">Phone Number</label>
                  <input
                    type="tel"
                    id="settingsPhone"
                    name="phone"
                    placeholder="Enter your phone number"
                    value="<%= user?.phone || '' %>"
                  />
                  <div id="settingsPhoneError" class="error"></div>
                </div>
              </div>

              <div class="settings-section">
                <h4>Owner Information</h4>
                <div class="form-group">
                  <label for="settingsLocation">Primary Location</label>
                  <input
                    type="text"
                    id="settingsLocation"
                    name="location"
                    placeholder="City, State, Country"
                    value="<%= user?.location || '' %>"
                  />
                  <div id="settingsLocationError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsNumProperties"
                    >Number of Properties</label
                  >
                  <input
                    type="text"
                    id="settingsNumProperties"
                    name="numProperties"
                    min="1"
                    placeholder="How many properties do you own?"
                    value="<%= user?.numProperties || '' %>"
                  />
                </div>
                <div class="form-group">
                  <label for="settingsPaymentInfo">Payment Information</label>
                  <input
                    type="text"
                    id="settingsPaymentInfo"
                    name="paymentInfo"
                    placeholder="Bank Account Number"
                    value="<%= user?.accountNo || '' %>"
                  />
                </div>
                <div class="form-group">
                  <label for="settingsUPI">UPI ID</label>
                  <input
                    type="text"
                    id="settingsUPI"
                    name="upiID"
                    placeholder="Your UPI ID"
                    value="<%= user?.upiid || '' %>"
                  />
                </div>
              </div>

              <div class="settings-section">
                <h4>Change Password</h4>
                <div class="form-group">
                  <label for="settingsCurrentPassword">Current Password</label>
                  <input
                    type="password"
                    id="settingsCurrentPassword"
                    name="currentPassword"
                    placeholder="Current password"
                  />
                  <div id="settingsCurrentPasswordError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsNewPassword">New Password</label>
                  <input
                    type="password"
                    id="settingsNewPassword"
                    name="newPassword"
                    placeholder="New password"
                  />
                  <div id="settingsNewPasswordError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsConfirmPassword"
                    >Confirm New Password</label
                  >
                  <input
                    type="password"
                    id="settingsConfirmPassword"
                    name="confirmPassword"
                    placeholder="Confirm new password"
                  />
                  <div id="settingsConfirmPasswordError" class="error"></div>
                </div>
              </div>

              <div class="settings-section">
                <h4>Notification Preferences</h4>
                <div class="checkbox-group">
                  <label for="emailNotifications">Email notifications</label>
                  <input type="checkbox" id="emailNotifications"
                  name="emailNotifications" <%= user?.notifications?.email ?
                  'checked' : '' %> />
                  <label for="emailNotifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="smsNotifications">SMS notifications</label>
                  <input type="checkbox" id="smsNotifications"
                  name="smsNotifications" <%= user?.notifications?.sms ?
                  'checked' : '' %> />
                  <label for="smsNotifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="paymentReminders">Payment reminders</label>
                  <input type="checkbox" id="paymentReminders"
                  name="paymentReminders" <%= user?.notifications?.payment ?
                  'checked' : '' %> />
                  <label for="paymentReminders" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="complaintAlerts">Complaint alerts</label>
                  <input type="checkbox" id="complaintAlerts"
                  name="complaintAlerts" <%= user?.notifications?.complaint ?
                  'checked' : '' %> />
                  <label for="complaintAlerts" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="maintenanceAlerts">Maintenance alerts</label>
                  <input type="checkbox" id="maintenanceAlerts"
                  name="maintenanceAlerts" <%= user?.notifications?.maintenance
                  ? 'checked' : '' %> />
                  <label for="maintenanceAlerts" class="button"></label>
                </div>
              </div>
            </div>

            <div class="button-container">
              <button
                type="submit"
                id="saveSettingsBtn"
                class="settings-button primary-button"
              >
                Save Changes
              </button>
              <button
                type="button"
                id="cancelSettingsBtn"
                class="settings-button secondary-button"
              >
                Cancel
              </button>
            </div>
          </form>
          <div id="settingsSuccessMessage" class="success-message">
            Your settings have been updated successfully!
          </div>
        </div>

        <div id="notifications" class="section">
          <h3>Notifications</h3>
          <div class="notification-container">
            <% if (notifications && Array.isArray(notifications)) { %> <%
            notifications.forEach(notification => { %>
            <div
              class="notification-card"
              data-notification-id="<%= notification._id %>"
            >
              <div class="notification-header">
                <h4><%= notification.type || 'Booking Request' %></h4>
                <span
                  class="notification-status <%= (notification.status || 'pending').toLowerCase() %>"
                >
                  <%= notification.status || 'Pending' %>
                </span>
              </div>
              <div class="notification-details">
                <p>
                  <strong>Message:</strong> <%= notification.message || 'N/A' %>
                </p>
                <p>
                  <strong>Recipient:</strong> <%= notification.recipientName ||
                  'N/A' %>
                </p>
                <p>
                  <strong>Property:</strong> <%= notification.propertyName ||
                  'N/A' %>
                </p>
                <p>
                  <strong>Date:</strong> <%= notification.createdDate ? new
                  Date(notification.createdDate).toLocaleDateString() : 'N/A' %>
                </p>
              </div>
              <% if (notification.status === 'Pending') { %>
              <div class="notification-actions">
                <button
                  class="action-button approve-button"
                  onclick="handleNotificationAction('<%= notification._id %>', 'approve')"
                >
                  Approve
                </button>
                <button
                  class="action-button reject-button"
                  onclick="handleNotificationAction('<%= notification._id %>', 'reject')"
                >
                  Reject
                </button>
              </div>
              <% } %>
            </div>
            <% }) %> <% } else { %>
            <p>No notifications available.</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Function to refresh notifications section
      function refreshNotifications() {
        fetch("/api/notifications", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to fetch notifications");
            }
            return response.json();
          })
          .then((data) => {
            const notificationContainer = document.querySelector(
              ".notification-container"
            );
            notificationContainer.innerHTML = ""; // Clear existing notifications
            if (data.notifications && data.notifications.length > 0) {
              data.notifications.forEach((notification) => {
                const notificationCard = document.createElement("div");
                notificationCard.className = "notification-card";
                notificationCard.setAttribute(
                  "data-notification-id",
                  notification._id
                );
                notificationCard.innerHTML = `
            <div class="notification-header">
              <h4>${notification.type || "Booking Request"}</h4>
              <span class="notification-status ${notification.status.toLowerCase()}">
                ${notification.status || "Pending"}
              </span>
            </div>
            <div class="notification-details">
              <p><strong>Message:</strong> ${notification.message || "N/A"}</p>
              <p><strong>Recipient:</strong> ${
                notification.recipientName || "N/A"
              }</p>
              <p><strong>Property:</strong> ${
                notification.propertyName || "N/A"
              }</p>
              <p><strong>Date:</strong> ${
                notification.createdDate
                  ? new Date(notification.createdDate).toLocaleDateString()
                  : "N/A"
              }</p>
            </div>
            ${
              notification.status === "Pending"
                ? `
                  <div class="notification-actions">
                    <button class="action-button approve-button" onclick="handleNotificationAction('${notification._id}', 'approve')">
                      Approve
                    </button>
                    <button class="action-button reject-button" onclick="handleNotificationAction('${notification._id}', 'reject')">
                      Reject
                    </button>
                  </div>`
                : ""
            }
          `;
                notificationContainer.appendChild(notificationCard);
              });
            } else {
              notificationContainer.innerHTML =
                "<p>No notifications available.</p>";
            }
          })
          .catch((error) => {
            console.error("Error refreshing notifications:", error);
          });
      }
      let propertyToDelete = null;
      function showDeleteConfirmation(propertyId, isRented) {
        // Check if the property is currently rented
        if (isRented) {
          alert("Cannot delete this property because it is currently rented.");
          return;
        }

        // Set the property ID for deletion
        propertyToDelete = propertyId;

        // Show the confirmation dialog
        const deleteOverlay = document.getElementById("deletePropertyOverlay");
        deleteOverlay.style.display = "flex";
      }

      // Set up delete property event listeners
      document.addEventListener("DOMContentLoaded", function () {
        const deleteOverlay = document.getElementById("deletePropertyOverlay");
        const cancelDeleteBtn = document.getElementById("cancelDeleteProperty");
        const confirmDeleteBtn = document.getElementById(
          "confirmDeleteProperty"
        );

        // Cancel delete action
        cancelDeleteBtn.addEventListener("click", function () {
          deleteOverlay.style.display = "none";
          propertyToDelete = null;
        });

        // Confirm delete action
        confirmDeleteBtn.addEventListener("click", function () {
          if (propertyToDelete) {
            // Send delete request to the server
            deleteProperty(propertyToDelete);
          }
        });

        // Close the overlay when clicking outside
        window.addEventListener("click", function (event) {
          if (event.target === deleteOverlay) {
            deleteOverlay.style.display = "none";
            propertyToDelete = null;
          }
        });
      });

      // Function to send delete request to the server
      function deleteProperty(propertyId) {
        fetch(`/api/property/${propertyId}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Hide the overlay
              document.getElementById("deletePropertyOverlay").style.display =
                "none";

              // Remove the property card from the DOM
              const propertyCard = document.querySelector(
                `[data-property-id="${propertyId}"]`
              );
              if (propertyCard) {
                propertyCard.remove();
              }

              // Show success message
              alert("Property successfully deleted!");
            } else {
              alert("Failed to delete property: " + data.message);
            }
          })
          .catch((error) => {
            console.error("Error deleting property:", error);
            alert("An error occurred while deleting the property.");
          });
      }
      function showSection(sectionId) {
        const sections = document.querySelectorAll(".section");
        sections.forEach((section) => {
          section.classList.remove("active");
        });
        const activeSection = document.getElementById(sectionId);
        if (activeSection) {
          activeSection.classList.add("active");
        }
        if (window.innerWidth <= 768) {
          document.querySelector(".sidebar").classList.remove("active");
          document.querySelector(".menu-toggle").innerHTML =
            "<strong>></strong>";
        }
      }

      function toggleMenu() {
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        sidebar.classList.toggle("active");
        if (sidebar.classList.contains("active")) {
          menuButton.innerHTML = "<strong><</strong>";
        } else {
          menuButton.innerHTML = "<strong>></strong>";
        }
      }

      function toggleNav() {
        const navMenu = document.getElementById("nav-menu");
        const overlay = document.getElementById("overlay");
        if (navMenu.classList.contains("active")) {
          navMenu.classList.remove("active");
          overlay.classList.remove("active");
        } else {
          navMenu.classList.add("active");
          overlay.classList.add("active");
        }
      }

      document
        .getElementById("overlay")
        ?.addEventListener("click", function () {
          const navMenu = document.getElementById("nav-menu");
          navMenu.classList.remove("active");
          this.classList.remove("active");
        });

      const contactButtons = document.querySelectorAll(
        ".contact_tenant_button"
      );
      contactButtons.forEach((button) => {
        button.addEventListener("click", function () {
          const tenantDetails = this.closest(".tentant_details");
          if (tenantDetails) {
            const phoneElement =
              tenantDetails.querySelector("ul li:nth-child(3)");
            if (phoneElement) {
              const phoneText = phoneElement.textContent;
              const phoneNumber = phoneText.replace(/[^0-9]/g, "");
              if (phoneNumber) {
                window.location.href = "tel:" + phoneNumber;
              } else {
                console.error("Could not extract a valid phone number");
                alert("Could not find a valid phone number for this tenant");
              }
            } else {
              console.error("Phone number element not found");
              alert("Could not find contact information for this tenant");
            }
          }
        });
      });

      document.addEventListener("DOMContentLoaded", function () {
        const requestCards = document.querySelectorAll(".request-card");
        const statusUpdateOverlay = document.getElementById(
          "statusUpdateOverlay"
        );
        const markResolvedOverlay = document.getElementById(
          "markResolvedOverlay"
        );
        const deletePropertyOverlay = document.getElementById(
          "deletePropertyOverlay"
        );
        const confirmUpdateStatusBtn = document.getElementById(
          "confirmUpdateStatus"
        );
        const confirmMarkResolvedBtn = document.getElementById(
          "confirmMarkResolved"
        );
        const cancelUpdateStatusBtn =
          document.getElementById("cancelUpdateStatus");
        const cancelMarkResolvedBtn =
          document.getElementById("cancelMarkResolved");
        const confirmDeletePropertyBtn = document.getElementById(
          "confirmDeleteProperty"
        );
        const cancelDeletePropertyBtn = document.getElementById(
          "cancelDeleteProperty"
        );
        let currentStatusElement = null;
        let currentPropertyId = null;

        requestCards.forEach((card) => {
          const statusElement = card.querySelector(".request-status");
          const buttons = card.querySelectorAll(".request-actions button");

          buttons[0].addEventListener("click", function () {
            currentStatusElement = statusElement;
            const currentStatus = statusElement.textContent.toLowerCase();
            document
              .querySelectorAll('input[name="status"]')
              .forEach((radio) => {
                radio.checked = false;
              });
            if (currentStatus === "pending") {
              document.getElementById("status-pending").checked = true;
            } else if (currentStatus === "in progress") {
              document.getElementById("status-inprogress").checked = true;
            } else if (currentStatus === "resolved") {
              document.getElementById("status-resolved").checked = true;
            }
            statusUpdateOverlay.style.display = "flex";
          });

          buttons[1].addEventListener("click", function () {
            currentStatusElement = statusElement;
            markResolvedOverlay.style.display = "flex";
          });
        });

        confirmUpdateStatusBtn.addEventListener("click", function () {
          const selectedRadio = document.querySelector(
            'input[name="status"]:checked'
          );
          if (selectedRadio && currentStatusElement) {
            const newStatus = selectedRadio.value;
            updateRequestStatus(currentStatusElement, newStatus);
          }
          statusUpdateOverlay.style.display = "none";
        });

        confirmMarkResolvedBtn.addEventListener("click", function () {
          if (currentStatusElement) {
            updateRequestStatus(currentStatusElement, "resolved");
          }
          markResolvedOverlay.style.display = "none";
        });

        cancelUpdateStatusBtn.addEventListener("click", function () {
          statusUpdateOverlay.style.display = "none";
        });

        cancelMarkResolvedBtn.addEventListener("click", function () {
          markResolvedOverlay.style.display = "none";
        });

        function updateRequestStatus(statusElement, newStatus) {
          // Get the request ID from the closest request-card parent
          const requestCard = statusElement.closest(".request-card");
          if (!requestCard) {
            console.error("Could not find parent request card");
            alert("Error: Could not locate request information");
            return;
          }

          // Extract the request ID from the request card
          // You'll need to add a data attribute to your request cards in the EJS template
          const requestId = requestCard.getAttribute("data-request-id");
          if (!requestId) {
            console.error("Request ID not found");
            alert("Error: Request ID not found");
            return;
          }

          // Format the status value for the API
          let formattedStatus;
          switch (newStatus) {
            case "pending":
              formattedStatus = "Pending";
              break;
            case "in-progress":
              formattedStatus = "In Progress";
              break;
            case "resolved":
              formattedStatus = "Resolved";
              break;
            default:
              formattedStatus = newStatus;
          }

          // Send API request to update status
          fetch("/maintenance-request/status", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              requestId: requestId,
              status: formattedStatus,
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                // Update UI only after successful API response
                statusElement.classList.remove(
                  "pending",
                  "in-progress",
                  "resolved"
                );
                switch (newStatus) {
                  case "pending":
                    statusElement.textContent = "Pending";
                    statusElement.classList.add("pending");
                    break;
                  case "in-progress":
                    statusElement.textContent = "In Progress";
                    statusElement.classList.add("in-progress");
                    break;
                  case "resolved":
                    statusElement.textContent = "Resolved";
                    statusElement.classList.add("resolved");
                    break;
                }
                // Optional: Show success message
                console.log("Status updated successfully");
              } else {
                alert(
                  "Failed to update status: " +
                    (data.message || "Unknown error")
                );
              }
            })
            .catch((error) => {
              console.error(
                "Error updating maintenance request status:",
                error
              );
              alert(
                "An error occurred while updating the status. Please try again."
              );
            });
        }

        window.addEventListener("click", function (event) {
          if (event.target === statusUpdateOverlay) {
            statusUpdateOverlay.style.display = "none";
          }
          if (event.target === markResolvedOverlay) {
            markResolvedOverlay.style.display = "none";
          }
          if (event.target === deletePropertyOverlay) {
            deletePropertyOverlay.style.display = "none";
            currentPropertyId = null;
          }
        });
      });

      document
        .getElementById("settingsForm")
        ?.addEventListener("submit", function (e) {
          e.preventDefault();
          document.getElementById("settingsSuccessMessage").style.display =
            "block";
          setTimeout(function () {
            document.getElementById("settingsSuccessMessage").style.display =
              "none";
          }, 3000);
        });

      document
        .getElementById("cancelSettingsBtn")
        ?.addEventListener("click", function () {
          document.getElementById("settingsForm").reset();
        });

      // Handle notification actions (approve/reject)
      function handleNotificationAction(notificationId, action) {
        fetch("/notifications/action", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include", // Ensure cookies/session are sent
          body: JSON.stringify({ notificationId, action }),
        })
          .then((response) => {
            // Check if response is ok (status in the range 200-299)
            if (!response.ok) {
              return response.json().then((errorData) => {
                throw new Error(
                  errorData.message || `HTTP error! Status: ${response.status}`
                );
              });
            }
            return response.json();
          })
          .then((data) => {
            if (data.success) {
              const notificationCard = document.querySelector(
                `.notification-card[data-notification-id="${notificationId}"]`
              );
              const statusElement = notificationCard.querySelector(
                ".notification-status"
              );
              // Update status text and class
              statusElement.textContent =
                action === "approve" ? "Approved" : "Rejected";
              statusElement.classList.remove("pending");
              statusElement.classList.add(
                action === "approve" ? "approved" : "rejected"
              );
              // Remove action buttons
              const actions = notificationCard.querySelector(
                ".notification-actions"
              );
              if (actions) {
                actions.remove();
              }
              // Show success message
              alert(
                `Notification ${
                  action === "approve" ? "approved" : "rejected"
                } successfully!`
              );
              refreshNotifications();
            } else {
              alert(
                `Failed to ${action} notification: ${
                  data.message || "Unknown error"
                }`
              );
            }
          })
          .catch((error) => {
            console.error("Error handling notification action:", error);
            alert(`Failed to process the request: ${error.message}`);
          });
      }
    </script>
  </body>
</html>
