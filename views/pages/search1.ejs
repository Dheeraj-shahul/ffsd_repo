<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Results Page</title>
    <link rel="stylesheet" href="/css/search.css">
    <style>
        /* General Styles */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap');
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            background-color: #f4f4f4;
        }

        /* Sidebar Styles */
        aside {
            width: 270px;
            background: #333;
            padding: 20px;
            box-shadow: 2px 0px 5px rgba(0, 0, 0, 0.1);
            height: 100vh;
            color: white;
            position: fixed;
            left: 0;
            top: 0;
            transition: transform 0.5s ease-in-out;
            margin-left:-9px;
            margin-top:-5px;
            
                
                
        }

        /* Hide sidebar on mobile (initially off-screen) */
        @media (max-width: 768px) {
            aside {
                transform: translateX(-100%);
                position: fixed;
                height: 100%;
                z-index: 1000;
            }
        }
        @media (max-width: 480px) {
            aside {
                transform: translateX(-100%);
                position: fixed;
                height: 100%;
                z-index: 1000;
                
                
                
            }
        }

        /* Show sidebar on mobile when active */
        aside.active {
            transform: translateX(0);
        }

        /* Small filter icon (mobile only) */
        .filter-icon {
            display: none;
            position: fixed;
            top: 90px;
            left: 10px;
            background: #ffc109;
            color: black;
            padding: 10px;
            padding-bottom: 4px;
            padding-right: 8px;
            padding-left: 8px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 2000;
        }

        @media (max-width: 768px) {
            .filter-icon {
                display: block;
            }
        }

        /* Sort options */
        .sort-options {
            margin: 20px;
        }

        .sort-options select {
            padding: 5px;
        }

        /* Content section */
        .content {
            margin-left: 270px;
            padding: 20px;
            flex: 1;
        }

        @media (max-width: 768px) {
            .content {
                margin-left: 0;
            }
        }

        /* Close overlay (mobile) */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        .overlay.active {
            display: block;
        }

        h2 {
            color: #ff6f00;
            text-align: center;
            margin-right:70px;
        }

        aside h2 {
            margin-bottom: 10px;
            color: #ffc107;
        }

        .filters {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-group label {
            font-weight: bold;
            margin-bottom: 5px;
        }

        select {
            background-color: #f2e2b2;
            padding: 8px;
            border-radius: 5px;
            color: black;
            font-weight: bold;
        }

        select:hover {
            border-color: #e0a800;
        }

        #priceValue {
            background-color: #f2e2b2;
            padding: 8px;
            border-radius: 5px;
            color: black;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        input[type="range"],
        aside button {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            background-color: red;
        }

        /* Amenities Styling */
        fieldset {
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        .amenities-group {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
            padding: 5px;
        }

        .amenities-group label {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 15px;
        }

        .amenities-group input[type="checkbox"] {
            cursor: pointer;
            margin-right: 10px;
            font-weight: bold;
            font-size: 15px;
        }

        label {
            font-weight: bold;
            font-size: 15px;
            font-family: 'Poppins', sans-serif;
        }

        legend {
            font-size: 15px;
            font-weight: bold;
            color: white;
            margin-bottom: 10px;
            font-family: 'Poppins', sans-serif;
        }

        /* Search Button */
        .filters button {
            background: #ffc109;
            color: black;
            border: none;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
            font-weight: bold;
            font-family: 'Poppins', sans-serif;
        }

        .filters button:hover {
            background: #ff6f00;
        }

        /* Results Section */
        .results {
            background: #fff;
            padding: 15px;
            border-radius: 0%;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
            margin-left: 20px;
        }
        
        @media(max-width: 768px) {
            .results {
                margin-left: 10px;
                margin-right: 10px;
            }
            .filter-icon {
                margin-top: -6px;
                margin-left: 30px;
                position: fixed;
            }

            #sidebar {
        position: fixed;
        top: 0;
        left: 0; 
        bottom:-200px;
        width: 50vw; /* Half of the viewport width */
        overflow-y: auto; /* Allow full scroll */
        background: #333;
       
        
        padding-bottom:200px;
        
    }
        }

        @media(max-width: 480px) {
            .filter-icon {
                margin-top: -10px;
                margin-left: 3px;
                background-color: transparent;
            }
        }

        #result-list {
            list-style: none;
            padding: 0;
        }

        #result-list li {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        /* Pagination */
        .pagination {
            margin-top: 15px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }

        .pagination span {
            font-size: 16px;
            line-height: 1;
        }

        

        .pagination button:hover {
            background: #ff6f00;
        }

        /* Back to Search Link */
        section a {
            display: inline-block;
            margin-top: 15px;
            text-decoration: none;
            color: #007bff;
            padding-left: 20px;
        }

        section a:hover {
            text-decoration: underline;
            color: #ff6f00 !important;
        }
        
        #navbar-container {
            position: fixed;
            z-index: 100;
            width: 100%;
        }
        
        .container {
            padding-top: 60px;
        }
        
        .testing {
            margin-left: 50px;
            margin-right: 40px;
            margin-top: -30px;
        }
        
        * {
            margin-right: 0px;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        /* Base styles */
#sidebar {
    width: 100%;
    max-width: 300px; /* Adjust width as needed */
    padding: 16px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Make sidebar scrollable on mobile */
@media (max-width: 480px) {
    #sidebar {
        position: fixed;
        top: 0;
        left: 0; 
        bottom: 0;
        width: 50vw; /* Half of the viewport width */
        overflow-y: auto; /* Allow full scroll */
        background: #333;
        z-index: 999; /* Keep above other content */
    }

    /* Ensure amenities section is scrollable */
    .amenities-group {
        display: flex;
        flex-wrap: wrap; /* Allow checkboxes to wrap */
        gap: 8px; /* Space between checkboxes */
    }

    /* If needed, ensure no element overflows */
    fieldset {
        min-width: 100%;
        box-sizing: border-box; /* Include padding in width */
    }
    #sidebar::-webkit-scrollbar {
        display: none; 
}
}
@media(min-width:1024px){
    #sidebar {
        position: fixed;
        top: 0;
        left: 0; 
        bottom:-200px;
        width: 50vw; /* Half of the viewport width */
        overflow-y: auto; /* Allow full scroll */
        background: #333;
       
        margin-top:60px;
        padding-bottom:200px;
        
    }

    #sidebar::-webkit-scrollbar {
    display: none; 
}
}

    </style>
</head>
<body>

    <%- include('../partials/header') %>
    
    <div class="container">
        <!-- Small Filter icon (mobile only) -->
        <div class="filter-icon" id="filter-icon">
            <img src="https://cdn-icons-png.flaticon.com/128/3839/3839020.png" alt="Filter" width="25" height="25">
        </div>

        <!-- Overlay for mobile -->
        <div class="overlay" id="overlay"></div>

        <!-- Sidebar Filters -->
        <aside id="sidebar">
            <h2>Apply Filters</h2>
            <form action="/search" method="GET">
                <div class="filters">
                    <div class="filter-group">
                        <label for="location">Location:</label>
                        <select name="location" id="location">
                            <option value="">Select Location</option>
                            <option value="chennai">Chennai</option>
                            <option value="kolkata">Kolkata</option>
                            <option value="visakhapatnam">Visakhapatnam</option>
                            <option value="mumbai">Mumbai</option>
                            <option value="hyderabad">Hyderabad</option>
                            <option value="bangalore">Bangalore</option>
                            <option value="delhi">Delhi</option>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="property-type">Property Type:</label>
                        <select name="property-type" id="property-type">
                            <option value="">Select Type</option>
                            <option value="flat">Flat</option>
                            <option value="house">House</option>
                            <option value="apartment">Apartment</option>
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="price-range">Price Range:</label>
                        <input type="range" id="price-range" name="price" min="3500" max="100000" step="1000" oninput="priceValue.innerText = this.value">
                        <span id="priceValue">15000</span>
                    </div>

                    <div class="filter-group">
                        <label for="bedrooms">Bedrooms:</label>
                        <select name="bedroom-no" id="bedroom-no">
                            <option value="">Select No. of Bedrooms</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="bathrooms">Bathrooms:</label>
                        <select name="bathroom-no" id="bathroom-no">
                            <option value="">Select No. of Bathrooms</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            
                            
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="furnishing">Furnishing:</label>
                        <select name="furnishing" id="furnishing">
                            <option value="">Select Furnishing Type</option>
                            <option value="furnished">Furnished</option>
                            <option value="unfurnished">Unfurnished</option>
                            <option value="semi-furnished">Semi-Furnished</option>
                        </select>
                    </div>


                    <fieldset>
                        <legend>Amenities:</legend>
                        <div class="amenities-group">
                            <label><input type="checkbox" name="amenities" value="parking"> Parking</label>
                            <label><input type="checkbox" name="amenities" value="wifi"> WiFi</label>
                            <label><input type="checkbox" name="amenities" value="pool"> Pool</label>
                            <label><input type="checkbox" name="amenities" value="gym"> Gym</label>
                            <label><input type="checkbox" name="amenities" value="security"> Security</label>
                            <label><input type="checkbox" name="amenities" value="balcony"> Balcony</label>
                            <label><input type="checkbox" name="amenities" value="water supply"> Water Supply</label>
                            <label><input type="checkbox" name="amenities" value="kids play area"> Kids Play Area</label>
                            <label><input type="checkbox" name="amenities" value="lift"> Lift</label>
                        </div>
                    </fieldset>

                    <button type="submit">Search Homes</button>
                </div>
            </form>
        </aside>

        <!-- Main Content -->
        <section class="content">
            <h2>Search Results</h2>

            <!-- Sorting Options -->
            <div class="sort-options">
                <label for="sort">Sort by:</label>
                <select id="sort">
                    <option value="rating">Rating</option>
                    <option value="price-low-to-high">Price: Low to High</option>
                    <option value="price-high-to-low">Price: High to Low</option>
                    <option value="availability-soon">Availability: Soon</option>
                </select>
            </div>

            <!-- Results Section -->
            <div class="results">
                <h2 class="section-title">Featured Houses</h2>
                <ul id="result-list" class="property-grid">
                  <% 
                    // Extract query parameters from the request (passed from app.js)
                    const queryParams = request.query || {};
                    const location = (queryParams.location || '').toLowerCase();
                    const place = (queryParams.query || '').toLowerCase();
                    const category = (queryParams.category || '').toLowerCase();
            
                    // Filtering logic directly in EJS
                    function extractPlace(address) {
                      const parts = address.split(',').map(part => part.trim());
                      return parts[parts.length - 1];
                    }
            
                    const filteredProperties = properties.filter(property => {
                      const propertyPlace = extractPlace(property.address).toLowerCase();
                      return (
                        (!location || property.location.toLowerCase() === location) &&
                        (!place || propertyPlace.includes(place)) &&
                        (category === 'all' || !category || property.type.toLowerCase() === category)
                      );
                    });
            
                    if (filteredProperties.length > 0) { 
                      filteredProperties.forEach(property => { 
                  %>
                    <li class="property-card">
                      <div class="property-image">
                        <img src="<%= property.images[0] %>" alt="Property Image">
                        <div class="property-type"><%= property.subtype %></div>
                      </div>
                      <div class="property-info">
                        <h3 class="property-name"><%= property.name %></h3>
                        <p class="property-address"><%= property.address %></p>
                        <p class="property-category">Type: <%= property.type %></p>
                        <div class="property-features">
                          <div class="feature"><span class="feature-icon">🛏️</span> <%= property.beds %> Beds</div>
                          <div class="feature"><span class="feature-icon">🛁</span> <%= property.baths %> Baths</div>
                          <div class="feature"><span class="feature-icon">🛋️</span> <%= property.furnished %></div>
                        </div>
                       
                        <!-- Dynamic Star Rating -->
                        <div class="rating">
                            <div class="stars">
                            <% for (let i = 1; i <= 5; i++) { %>
                                <% if (i <= property.rating) { %>
                                    ★
                                <% } else { %>
                                    ☆

                                <% } %>
                            <% } %>
                            </div>
                            <div class="review-count">(<%= property.reviews %> reviews)</div>
                        </div>

                        <div class="property-price"><%= property.price %></div>
                        <p class="property-location">Location: <%= property.location %></p>
                        <div class="property-amenities">
                          <strong>Amenities:</strong>
                          <% property.amenities.forEach(amenity => { %>
                            <span class="amenity"><%= amenity %></span><%= amenity !== property.amenities[property.amenities.length - 1] ? ', ' : '' %>
                          <% }); %>
                        </div>
                        <div class="property-footer">
                            <a href="/property<% if (property && property.id) { %>?id=<%= property.id %><% } %>" class="btn">View Details</a>
                          <button class="btn wishlist-btn">❤ Save</button>
                        </div>
                      </div>
                    </li>
                  <% }); %>
                  <% } else { %>
                    <li>No results found</li>
                  <% } %>
                </ul>
              </div>
            <a href="/">Back to Home</a>
        </section>
    </div>

    
 
    <script>

    //Sorting Script
    const initialProperties = <%- JSON.stringify(filteredProperties) %>;
    document.addEventListener("DOMContentLoaded",function(){
        const sortSelect = document.getElementById("sort");
        const resultList=document.getElementById("resultList");

        // Sort and re-render when dropdown changes
        sortSelect.addEventListener('change', function() {
      const sortBy = this.value;
      let sortedProperties = [...initialProperties]; // Copy to avoid mutating original

      switch (sortBy) {
        case 'rating':
          sortedProperties.sort((a, b) => b.rating - a.rating); // Highest rating first
          break;
        case 'price-low-to-high':
          sortedProperties.sort((a, b) => parsePrice(a.price) - parsePrice(b.price));
          break;
        case 'price-high-to-low':
          sortedProperties.sort((a, b) => parsePrice(b.price) - parsePrice(a.price));
          break;
        case 'availability-soon':
          // Placeholder: Add availability field to properties.js if needed
          sortedProperties.sort((a, b) => {
            const dateA = a.availability ? new Date(a.availability) : new Date(0);
            const dateB = b.availability ? new Date(b.availability) : new Date(0);
            return dateA - dateB; // Earliest first
          });
          break;
      }

      renderProperties(sortedProperties);
    });

    // Function to render properties
    function renderProperties(props) {
      resultList.innerHTML = ''; // Clear existing list
      if (props.length === 0) {
        resultList.innerHTML = '<li>No results found</li>';
        return;
      }

      props.forEach(property => {
        const li = document.createElement('li');
        li.className = 'property-card';
        li.innerHTML = `
          <div class="property-image">
            <img src="${property.images[0]}" alt="Property Image">
            <div class="property-type">${property.subtype}</div>
          </div>
          <div class="property-info">
            <h3 class="property-name">${property.name}</h3>
            <p class="property-address">${property.address}</p>
            <p class="property-category">Type: ${property.type}</p>
            <div class="property-features">
              <div class="feature"><span class="feature-icon">🛏️</span> ${property.beds} Beds</div>
              <div class="feature"><span class="feature-icon">🛁</span> ${property.baths} Baths</div>
              <div class="feature"><span class="feature-icon">🛋️</span> ${property.furnished}</div>
            </div>
            <div class="rating">
              <div class="stars">
                ${Array(5).fill(0).map((_, i) => i < property.rating ? '★' : '☆').join('')}
              </div>
              <div class="review-count">(${property.reviews} reviews)</div>
            </div>
            <div class="property-price">${property.price}</div>
            <p class="property-location">Location: ${property.location}</p>
            <div class="property-amenities">
              <strong>Amenities:</strong>
              ${property.amenities.map((amenity, idx) => `<span class="amenity">${amenity}</span>${idx < property.amenities.length - 1 ? ', ' : ''}`).join('')}
            </div>
            <div class="property-footer">
              <a href="/property?id=${property.id}" class="btn">View Details</a>
              <button class="btn wishlist-btn">❤ Save</button>
            </div>
          </div>
        `;
        resultList.appendChild(li);
      });
    }

    // Helper function to parse price
    function parsePrice(priceStr) {
      return parseInt(priceStr.replace(/[^0-9]/g, ''), 10) || 0;
    }
  });

    
    
    
    document.addEventListener("DOMContentLoaded", function() {
        const filterIcon = document.getElementById("filter-icon");
        const sidebar = document.getElementById("sidebar");
        const overlay = document.getElementById("overlay");

        // Function to toggle sidebar
        function toggleSidebar() {
            const isActive = sidebar.classList.contains("active");
            if (isActive) {
                sidebar.classList.remove("active");
                overlay.classList.remove("active");
                filterIcon.style.display = "block"; // show filter icon when sidebar closes
            } else {
                sidebar.classList.add("active");
                overlay.classList.add("active");
                filterIcon.style.display = "none"; // hide filter icon when sidebar opens
            }
        }

        // Click event for filter icon
        filterIcon.addEventListener("click", toggleSidebar);

        // Click event for overlay to close sidebar and show filter icon again
        overlay.addEventListener("click", function() {
            sidebar.classList.remove("active");
            overlay.classList.remove("active");
            filterIcon.style.display = "block"; // show filter icon when sidebar closes
        });

        // Display selected price range value dynamically
        const priceInput = document.getElementById("price-range");
        const priceValue = document.getElementById("priceValue");

        if (priceInput) {
            priceInput.addEventListener("input", function() {
                priceValue.innerText = this.value;
            });
        }
    });

   
</script>
</body>
</html>