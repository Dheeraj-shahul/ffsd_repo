<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tenant Dashboard - RentEase</title>
    <link rel="stylesheet" href="/css/user_dashboard.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <!-- Header -->
    <%- include('../partials/header') %>

    <div class="overlay" id="overlay"></div>
    <button class="menu-toggle" onclick="toggleMenu()">
      <strong>></strong>
    </button>
    <div class="dashboard-container">
      <!-- Sidebar Navigation -->
      <div class="sidebar" id="sidebar">
        <h2>Tenant Dashboard</h2>
        <ul>
          <li onclick="showSection('home')">
            <i class="fa-solid fa-house"></i> Home
          </li>
          <li onclick="showSection('rentPayments')">
            <i class="fa-solid fa-hand-holding-dollar"></i> Rent Payments
          </li>
          <li onclick="showSection('maintenance')">
            <i class="fa-solid fa-screwdriver-wrench"></i> Maintenance
          </li>
          <li onclick="showSection('complaints')">
            <i class="fa-solid fa-comments"></i> Complaints
          </li>
          <li onclick="showSection('movers')">
            <i class="fa-solid fa-users"></i> Domestic Workers
          </li>
          <li onclick="showSection('notifications')">
            <i class="fa-solid fa-bell"></i> Notifications
          </li>
          <li onclick="showSection('history')">
            <i class="fa-solid fa-clock-rotate-left"></i> Rental History
          </li>
          <li onclick="showSection('savedListings')">
            <i class="fa-solid fa-bookmark"></i> Saved Listings
          </li>
          <li onclick="showSection('ratings')">
            <i class="fa-solid fa-star-half-stroke"></i> Reviews & Ratings
          </li>
          <li onclick="showSection('settings')">
            <i class="fa-solid fa-gears"></i> Settings
          </li>
        </ul>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <!-- Home Section -->
        <div id="home" class="section active">
          <h3>Welcome, <%= user.firstName %> <%= user.lastName %></h3>
          <% if (currentProperty) { %>
          <div class="property-summary">
            <h4>Currently Renting</h4>
            <div class="property-card" id="home_proprty_card">
              <div class="img_container">
                <img
                  src="<%= currentProperty.images && currentProperty.images[0] ? currentProperty.images[0] : '/images/default-property.jpg' %>"
                  alt="Property Image"
                />
              </div>
              <div class="property-details">
                <p>
                  <strong>Property:</strong> <%= currentProperty.subtype || '' %> <%= currentProperty.name || 'N/A' %>
                </p>
                <p><strong>Address:</strong> <%= currentProperty.address || 'N/A' %></p>
                <p>
                  <strong>Owner:</strong> <%= propertyOwner ? propertyOwner.firstName + ' ' + propertyOwner.lastName : 'N/A' %>
                </p>
                <p>
                  <strong>Contact:</strong> <%= propertyOwner ? propertyOwner.email : 'N/A' %>
                </p>
                <p>
                  <strong>Monthly Rent:</strong> ₹<%= currentProperty.price || 'N/A' %>
                </p>
                <p>
                  <strong>Due Date:</strong> <%= nextPayment ? new Date(nextPayment.dueDate).toLocaleDateString() : 'N/A' %>
                </p>
                <p>
                  <strong>Lease Period:</strong> <%= rentalHistory && rentalHistory.length && rentalHistory[0] ? new Date(rentalHistory[0].startDate).toLocaleDateString() + ' - ' + (rentalHistory[0].endDate ? new Date(rentalHistory[0].endDate).toLocaleDateString() : 'Ongoing') : 'N/A' %>
                </p>
              </div>
            </div>
          </div>
          <div class="quick-stats">
            <div class="stat-box">
              <h4>Next Rent Due</h4>
              <p>₹<%= nextPayment ? nextPayment.amount : 'N/A' %></p>
              <p>
                <%= nextPayment ? 'Due in ' + Math.ceil((new Date(nextPayment.dueDate) - new Date()) / (1000 * 60 * 60 * 24)) + ' days' : 'N/A' %>
              </p>
            </div>
            <div class="stat-box">
              <h4>Active Maintenance</h4>
              <p><%= activeMaintenanceRequests ? activeMaintenanceRequests.length : 0 %> Pending Requests</p>
            </div>
            <div class="stat-box">
              <h4>Saved Properties</h4>
              <p><%= user.savedListings ? user.savedListings.length : 0 %> Properties</p>
            </div>
          </div>
          <% } else { %>
          <p>No current property rented.</p>
          <% } %>
        </div>

        <!-- Rent Payments Section -->
        <div id="rentPayments" class="section">
          <h3>Rent Payments</h3>
          <% if (nextPayment) { %>
          <div class="current-rent">
            <p>
              Next Rent Due: <strong>₹<%= nextPayment.amount %></strong> on <%= new Date(nextPayment.dueDate).toLocaleDateString() %>
            </p>
            <button
              class="pay-buttons"
              onclick="alert('Payment processing not implemented')"
            >
              Pay Now
            </button>
          </div>
          <% } %>
          <h4>Payment History</h4>
          <div id="payment-history-container">
            <table class="payment-history">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Amount</th>
                  <th>Payment Method</th>
                  <th>Status</th>
                  <th>Receipt</th>
                </tr>
              </thead>
              <tbody>
                <% (payments || []).forEach(payment => { %>
                <tr>
                  <td>
                    <%= payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : 'N/A' %>
                  </td>
                  <td>₹<%= payment.amount || 'N/A' %></td>
                  <td><%= payment.paymentMethod || 'N/A' %></td>
                  <td class="<%= payment.status ? payment.status.toLowerCase() : '' %>">
                    <%= payment.status || 'N/A' %>
                  </td>
                  <td><a href="<%= payment.receiptUrl || '#' %>">View</a></td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Maintenance Request Section -->
        <div id="maintenance" class="section">
          <h3>Maintenance Requests</h3>
          <button class="book-button">Submit New Request</button>
          <h4>Active Requests</h4>
          <div class="maintenance-cards">
            <% (activeMaintenanceRequests || []).forEach(request => { %>
            <div class="maintenance-card">
              <div class="maintenance-header">
                <h5><%= request.issueType || 'Unknown' %> Issue</h5>
                <span
                  class="status <%= request.status ? request.status.toLowerCase().replace(' ', '-') : 'pending' %>"
                  ><%= request.status || 'Pending' %></span
                >
              </div>
              <p>
                <strong>Date Reported:</strong> <%= request.dateReported ? new Date(request.dateReported).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= request.description || 'N/A' %></p>
              <p><strong>Location:</strong> <%= request.location || 'N/A' %></p>
              <p>
                <strong>Assigned To:</strong> <%= request.assignedTo || 'Awaiting assignment' %>
              </p>
              <% if (request.scheduledDate) { %>
              <p>
                <strong>Scheduled For:</strong> <%= new Date(request.scheduledDate).toLocaleString() %>
              </p>
              <% } %>
              <button class="small-button">Update</button>
            </div>
            <% }); %>
          </div>
          <h4>Completed Requests</h4>
          <div class="maintenance-cards">
            <% (completedMaintenanceRequests || []).forEach(request => { %>
            <div class="maintenance-card">
              <div class="maintenance-header">
                <h5><%= request.issueType || 'Unknown' %> Issue</h5>
                <span class="status completed">Completed</span>
              </div>
              <p>
                <strong>Date Reported:</strong> <%= request.dateReported ? new Date(request.dateReported).toLocaleDateString() : 'N/A' %>
              </p>
              <p>
                <strong>Date Completed:</strong> <%= request.completedDate ? new Date(request.completedDate).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= request.description || 'N/A' %></p>
              <p>
                <strong>Serviced By:</strong> <%= request.assignedTo || 'N/A' %>
              </p>
            </div>
            <% }); %>
          </div>
        </div>

        <div id="maintenance-request-popup" class="popup-container">
          <div class="popup-content">
            <span class="close-btn">×</span>
            <h3>Submit Maintenance Request</h3>
            <form id="maintenance-request-form">
              <div class="form-group">
                <label for="issue-type">Issue Type:</label>
                <select id="issue-type" required>
                  <option value="">Select an issue type</option>
                  <option value="Plumbing">Plumbing</option>
                  <option value="Electrical">Electrical</option>
                  <option value="HVAC">HVAC/AC</option>
                  <option value="Appliance">Appliance</option>
                  <option value="Structural">Structural</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              <div class="form-group">
                <label for="description">Description:</label>
                <textarea
                  id="description"
                  rows="4"
                  placeholder="Please describe the issue in detail"
                  required
                ></textarea>
              </div>
              <div class="form-group">
                <label for="location">Location:</label>
                <input
                  type="text"
                  id="location"
                  placeholder="e.g., Kitchen, Bathroom, Living Room"
                  required
                />
              </div>
              <div class="form-group">
                <label for="preferred-date">Date</label>
                <input type="date" id="preferred-date" />
              </div>
              <div class="form-group">
                <button type="submit" class="submit-btn">Submit Request</button>
              </div>
            </form>
          </div>
        </div>

        <!-- Complaint Submission Section -->
        <div id="complaints" class="section">
          <h3>Submit a Query / Complaint</h3>
          <form class="query-form" id="complaint-form">
            <select required>
              <option value="" disabled selected>Select Category</option>
              <option value="rent">Rent Related</option>
              <option value="property">Property Issues</option>
              <option value="neighbor">Neighbor Complaints</option>
              <option value="service">Service Quality</option>
              <option value="other">Other</option>
            </select>
            <input
              type="text"
              placeholder="Subject"
              class="query-text-input"
              required
            />
            <textarea
              class="query-text-input"
              rows="4"
              placeholder="Describe your issue..."
              required
            ></textarea>
            <button type="submit">Submit Complaint</button>
          </form>
          <h4>Previous Complaints</h4>
          <div class="complaints-history">
            <% (complaints || []).forEach(complaint => { %>
            <div class="complaint-item">
              <div class="complaint-header">
                <h5><%= complaint.subject || 'N/A' %></h5>
                <span
                  class="status <%= complaint.status ? complaint.status.toLowerCase().replace(' ', '-') : 'open' %>"
                  ><%= complaint.status || 'Open' %></span
                >
              </div>
              <p>
                <strong>Date:</strong> <%= complaint.dateSubmitted ? new Date(complaint.dateSubmitted).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= complaint.description || 'N/A' %></p>
              <% if (complaint.response) { %>
              <p><strong>Response:</strong> <%= complaint.response %></p>
              <% } %>
            </div>
            <% }); %>
          </div>
        </div>

  <!-- Domestic Workers Booking -->
<div id="movers" class="section">
  <h3>Domestic Worker Services</h3>
  <p>Book verified domestic workers nearby to complete your daily chores.</p>
  <div class="service-categories">
    <div class="service-category">
      <h4>Cleaning Services</h4>
      <p>Professional house cleaning</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=cleaning'">Find Cleaners</button>
    </div>
    <div class="service-category">
      <h4>Cooking Services</h4>
      <p>Skilled cooks for daily meals</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=cooking'">Find Cooks</button>
    </div>
    <div class="service-category">
      <h4>Laundry Services</h4>
      <p>Washing and ironing services</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=laundry'">Find Help</button>
    </div>
  </div>
  <h4>Your Current Service Providers</h4>
  <div class="worker-cards">
    <% if (workers && workers.length > 0) { %>
      <% workers.forEach(worker => { %>
        <div class="worker-card">
          <img src="<%= worker.image || '/resources/default-worker.jpg' %>" alt="Worker Photo" />
          <div class="worker-details">
            <h5><%= worker.firstName %> <%= worker.lastName %></h5>
            <p><strong>Service:</strong> <%= worker.serviceType || 'N/A' %></p>
            <p><strong>Schedule:</strong> <%= worker.availability || 'N/A' %></p>
            <p><strong>Fee:</strong> ₹<%= worker.price || 'N/A' %> <%= worker.rateUnit ? '/' + worker.rateUnit : '' %></p>
            <p><strong>Experience:</strong> <%= worker.experience ? worker.experience + ' years' : 'N/A' %></p>
            <p><strong>Phone:</strong> <%= worker.phone || 'N/A' %></p>
            
            <div class="worker-status <%= worker.serviceStatus === 'Available' ? 'status-available' : 'status-unavailable' %>">
              <%= worker.serviceStatus || 'Available' %>
            </div>

            <div class="rating">
              <% if (worker.ratingId && worker.ratingId.average) { %>
                <span><%= '⭐'.repeat(Math.round(worker.ratingId.average)) %></span>
                <%= worker.ratingId.average.toFixed(1) %>
              <% } else { %>
                <span>No ratings yet</span>
              <% } %>
            </div>
            
            <div class="worker-actions">
              <!-- <button class="action-button view-button" onclick="location.href='/workers/detail/<%= worker._id %>'">
                View Details
              </button> -->
              <!-- <button class="action-button book-button" onclick="location.href='/workers/booking/<%= worker._id %>'">
                Manage Booking
              </button> -->
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="no-workers-message">
        <p>You don't have any domestic workers assigned yet. Browse the services above to find help.</p>
      </div>
    <% } %>
  </div>
</div>

        <div id="notifications" class="section">
          <h3>Notifications</h3>
          <div classrast="notification-container">
            <% if (notifications && Array.isArray(notifications) && notifications.length > 0) { %>
              <% notifications.forEach(notification => { %>
                <div class="notification-card <%= notification.read ? 'read' : 'unread' %>" data-notification-id="<%= notification._id %>">
                  <p><strong>From:</strong> <%= notification.workerName || notification.propertyName || 'System' %></p>
                  <p><strong>Message:</strong> <%= notification.message %></p>
                  <p><strong>Date:</strong> <%= notification.createdDate.toLocaleString() %></p>
                  <p><strong>Status:</strong> <span class="notification-status <%= notification.status.toLowerCase() %>"><%= notification.status %></span></p>
                  <p><strong>Read:</strong> <%= notification.read ? 'Read' : 'Unread' %></p>
                  <% if (!notification.read) { %>
                    <button class="mark-read-button" data-notification-id="<%= notification._id %>">Mark as Read</button>
                  <% } %>
                </div>
              <% }) %>
            <% } else { %>
              <p>No notifications available.</p>
            <% } %>
          </div>
        </div>

        <!-- Rental History -->
        <div id="history" class="section">
          <h3>Rental History</h3>
          <div class="history-timeline">
            <% (rentalHistory || []).forEach(history => { %>
            <div class="history-item">
              <div class="timeline-dot"></div>
              <div class="history-content">
                <h4><%= history.property && history.property.name ? history.property.name : 'Unknown Property' %></h4>
                <p>
                  <strong>Period:</strong> <%= history.startDate ? new Date(history.startDate).toLocaleDateString() : 'N/A' %> - <%= history.endDate ? new Date(history.endDate).toLocaleDateString() : 'Present' %>
                </p>
                <p><strong>Monthly Rent:</strong> ₹<%= history.rent || 'N/A' %></p>
                <p><strong>Owner:</strong> <%= history.owner || 'N/A' %></p>
                <p><strong>Address:</strong> <%= history.address || 'N/A' %></p>
                <p>
                  <strong>Status:</strong>
                  <span class="status <%= history.status ? history.status.toLowerCase() : 'current' %>">
                    <%= history.status || 'Current' %>
                  </span>
                </p>
                <% if (history.reasonForMoving) { %>
                <p>
                  <strong>Reason for Moving:</strong> <%= history.reasonForMoving %>
                </p>
                <% } %>
              </div>
            </div>
            <% }); %>
          </div>
        </div>

        <!-- Saved Listings -->
        <div id="savedListings" class="section">
          <h3>Saved Listings</h3>
          <p>
            You have saved <%= user.savedListings ? user.savedListings.length : 0 %> properties for future reference.
          </p>
          <div class="saved-properties">
            <% (user.savedListings || []).forEach(property => { %>
            <div class="property-card" data-property-id="<%= property._id %>">
              <div class="img_container">
                <img
                  src="<%= property.images && property.images[0] ? property.images[0] : '/images/default-property.jpg' %>"
                  alt="Property Image"
                />
              </div>
              <div class="property-info">
                <h4><%= property.name || 'N/A' %></h4>
                <p><strong>Location:</strong> <%= property.location || 'N/A' %></p>
                <p><strong>Rent:</strong> ₹<%= property.price || 'N/A' %>/month</p>
                <p>
                  <strong>Available From:</strong> <%= property.availableFrom ? new Date(property.availableFrom).toLocaleDateString() : 'Immediate' %>
                </p>
                <div class="property-features">
                  <span><%= property.subtype || 'N/A' %></span>
                  <span><%= property.size || 'N/A' %></span>
                  <span><%= property.furnished || 'N/A' %></span>
                </div>
                <div class="card-actions">

                  <button class="book-button" onclick="location.href='/book-property?id=<%= property._id %>'">Book Now</button>
                  <a href="/property?id=<%= property._id %>" class="view-details">View Details</a>
                  <button class="remove-button" data-property-id="<%= property._id %>">
                    Remove
                  </button>

                  <button
                    class="book-button"
                    onclick="location.href='/property?id=1'"
                  >
                    View Details
                  </button>
                  <button class="remove-button">Remove</button>
                </div>
              </div>
            </div>

            <div class="property-card">
              <div class="img_container">
                <img
                  src="https://imagecdn.99acres.com/media1/26835/7/536707293M-1738721192640.webp"
                  alt="Property Image"
                />
              </div>
              <div class="property-info">
                <h4>Modern 2BHK with Garden</h4>
                <p><strong>Location:</strong> Gachibowli, Hyderabad</p>
                <p><strong>Rent:</strong> ₹30,000/month</p>
                <p><strong>Available From:</strong> April 15, 2023</p>
                <div class="property-features">
                  <span>2 BHK</span>
                  <span>1200 sq.ft</span>
                  <span>Semi-Furnished</span>
                </div>
                <div class="card-actions">
                  <button
                    class="book-button"
                    onclick="location.href='/property?id=2'"
                  >
                    View Details
                  </button>
                  <button class="remove-button">Remove</button>
                </div>
              </div>
            </div>

            <div class="property-card">
              <div class="img_container">
                <img
                  src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpzko2cckPQQt7_ufax8x6_EeXkCBz8Ssxtg&s"
                  alt="Property Image"
                />
              </div>
              <div class="property-info">
                <h4>Spacious 1BHK Near Metro</h4>
                <p><strong>Location:</strong> Ameerpet, Hyderabad</p>
                <p><strong>Rent:</strong> ₹18,000/month</p>
                <p><strong>Available From:</strong> Immediate</p>
                <div class="property-features">
                  <span>1 BHK</span>
                  <span>750 sq.ft</span>
                  <span>Unfurnished</span>
                </div>
                <div class="card-actions">
                  <button
                    class="book-button"
                    onclick="location.href='/property?id=3'"
                  >
                    View Details
                  </button>
                  <button class="remove-button">Remove</button>
                </div>
              </div>
            </div>

            <div class="property-card">
              <div class="img_container">
                <img src="/images/login.jpg" alt="Property Image" />
              </div>
              <div class="property-info">
                <h4>Premium 4BHK Villa</h4>
                <p><strong>Location:</strong> Banjara Hills, Hyderabad</p>
                <p><strong>Rent:</strong> ₹65,000/month</p>
                <p><strong>Available From:</strong> June 1, 2023</p>
                <div class="property-features">
                  <span>4 BHK</span>
                  <span>2500 sq.ft</span>
                  <span>Fully Furnished</span>
                </div>
                <div class="card-actions">
                  <button
                    class="book-button"
                    onclick="location.href='/property?id=1'"
                  >
                    View Details
                  </button>
                  <button class="remove-button">Remove</button>

                </div>
              </div>
            </div>
            <% }); %>
            <% if (!user.savedListings || user.savedListings.length === 0) { %>
              <p>No saved properties yet. Browse properties to save your favorites!</p>
            <% } %>
          </div>
        </div>

        <!-- Reviews & Ratings Section -->
        <div id="ratings" class="section">
          <h3>Reviews & Ratings</h3>
          <h4>Your Property Reviews</h4>
          <% if (currentProperty) { %>
          <div class="review-form">
            <h5>Review Your Current Property</h5>
            <div class="star-rating">
              <span>Rate your experience: </span>
              <div
                class="stars"
                id="star-rating"
                data-property-id="<%= currentProperty._id %>"
              >
                <span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span>
              </div>
            </div>
            <textarea
              rows="4"
              placeholder="Share your experience living here..."
              id="review-text"
            ></textarea>
            <button type="submit" id="review-submission">Submit Review</button>
          </div>
          <% } %>
          <h4>Past Reviews</h4>
          <div class="past-reviews">
            <% (ratings || []).forEach(rating => { %>
            <div class="review-card">
              <div class="review-header">
                <h5><%= rating.propertyId && rating.propertyId.name ? rating.propertyId.name : 'Unknown Property' %></h5>
                <div class="rating">
                  <%= rating.rating ? '⭐'.repeat(rating.rating) : '' %> <%= rating.rating ? rating.rating.toFixed(1) : 'N/A' %>
                </div>
              </div>
              <p class="review-date">
                Reviewed on: <%= rating.date ? new Date(rating.date).toLocaleDateString() : 'N/A' %>
              </p>
              <p class="review-text"><%= rating.review || 'No review provided' %></p>
            </div>
            <% }); %>
          </div>
        </div>

        <!-- Settings -->
        <div id="settings" class="section">
          <h3>Account Settings</h3>
          <div class="settings-container">
            <div id="profile-section">
              <h4>Personal Information</h4>
              <form class="profile-form" id="profile-form">
                <div class="form-group">
                  <label for="fullname">Full Name</label>
                  <input
                    type="text"
                    id="fullname"
                    value="<%= user.firstName %> <%= user.lastName %>"
                  />
                </div>
                <div class="form-group">
                  <label for="email">Email Address</label>
                  <input type="email" id="email" value="<%= user.email %>" />
                </div>
                <div class="form-group">
                  <label for="phone">Phone Number</label>
                  <input type="tel" id="phone" value="<%= user.phone || '' %>" />
                </div>
                <div class="form-group">
                  <label for="address">Current Address</label>
                  <textarea id="address"><%= user.location || '' %></textarea>
                </div>
                <button type="submit" class="settings-submission-class">
                  Update Profile
                </button>
              </form>
            </div>
            <div id="security-section">
              <h4>Security Settings</h4>
              <form class="password-form" id="password-form">
                <div class="form-group">
                  <label for="current-password">Current Password</label>
                  <input type="password" id="current-password" />
                </div>
                <div class="form-group">
                  <label for="new-password">New Password</label>
                  <input type="password" id="new-password" />
                </div>
                <div class="form-group">
                  <label for="confirm-password">Confirm New Password</label>
                  <input type="password" id="confirm-password" />
                </div>
                <button type="submit" class="settings-submission-class">
                  Change Password
                </button>
              </form>
            </div>
            <div id="preferences-section">
              <h4>Notification Preferences</h4>
              <form class="notification-form" id="notification-form">
                <div class="checkbox-group">
                  <label for="email-notifications">Email Notifications</label>
                  <input type="checkbox" id="email-notifications" <%= user.emailNotifications ? 'checked' : '' %> />
                  <label for="email-notifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="sms-notifications">SMS Notifications</label>
                  <input type="checkbox" id="sms-notifications" <%= user.smsNotifications ? 'checked' : '' %> />
                  <label for="sms-notifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="rent-reminders">Rent Due Reminders</label>
                  <input type="checkbox" id="rent-reminders" <%= user.rentReminders ? 'checked' : '' %> />
                  <label for="rent-reminders" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="maintenance-updates">Maintenance Updates</label>
                  <input type="checkbox" id="maintenance-updates" <%= user.maintenanceUpdates ? 'checked' : '' %> />
                  <label for="maintenance-updates" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="new-listings">New Property Listings</label>
                  <input type="checkbox" id="new-listings" <%= user.newListings ? 'checked' : '' %> />
                  <label for="new-listings" class="button"></label>
                </div>
                <button type="submit" class="settings-submission-class">
                  Save Preferences
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>


async function markNotificationAsRead(notificationId) {
  console.log("Marking notification as read:", { notificationId });
  try {
    const response = await fetch("/tenant/notification/read", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ notificationId }),
    });
    const result = await response.json();
    console.log("Mark notification response:", result);
    if (result.success) {
      showNotification(result.message || "Notification marked as read", "success");
      const notificationCard = document.querySelector(`.notification-card[data-notification-id="${notificationId}"]`);
      if (notificationCard) {
        notificationCard.classList.remove("unread");
        notificationCard.classList.add("read");
        const readStatus = notificationCard.querySelector("p:nth-child(5)");
        if (readStatus) readStatus.innerHTML = "<strong>Read:</strong> Read";
        const markButton = notificationCard.querySelector(".mark-read-button");
        if (markButton) markButton.remove();
      } else {
        console.warn(`Notification card with ID ${notificationId} not found in DOM`);
      }
    } else {
      showNotification(result.message || "Error marking notification as read", "error");
    }
  } catch (error) {
    console.error("Mark notification error:", error);
    showNotification("Failed to mark notification as read. Please try again.", "error");
  }
}

document.addEventListener("click", (event) => {
  if (event.target.classList.contains("mark-read-button")) {
    const notificationId = event.target.dataset.notificationId;
    if (notificationId) {
      markNotificationAsRead(notificationId);
    }
  }
});



      function showSection(sectionId) {
        console.log("Showing section:", sectionId);
        const sections = document.querySelectorAll(".section");
        sections.forEach((section) => section.classList.remove("active"));
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
          targetSection.classList.add("active");
        } else {
          console.error("Section not found:", sectionId);
        }
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        if (window.innerWidth <= 768 && sidebar && menuButton) {
          sidebar.classList.remove("active");
          menuButton.innerHTML = "<strong>></strong>";
        }
      }

      function toggleMenu() {
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        if (sidebar && menuButton) {
          sidebar.classList.toggle("active");
          menuButton.innerHTML = sidebar.classList.contains("active")
            ? "<strong><</strong>"
            : "<strong>></strong>";
        }
      }

      function toggleNav() {
        const navMenu = document.getElementById("nav-menu");
        const overlay = document.getElementById("overlay");
        if (navMenu && overlay) {
          navMenu.classList.toggle("active");
          overlay.classList.toggle("active");
        }
      }

      document.addEventListener("DOMContentLoaded", function () {
        const overlay = document.getElementById("overlay");
        if (overlay) {
          overlay.addEventListener("click", function () {
            const navMenu = document.getElementById("nav-menu");
            if (navMenu) {
              navMenu.classList.remove("active");
              overlay.classList.remove("active");
            }
          });
        }

        const popup = document.getElementById("maintenance-request-popup");
        const bookButton = document.querySelector(".book-button");
        const closeBtn = document.querySelector(".close-btn");
        const maintenanceForm = document.getElementById("maintenance-request-form");
        const complaintForm = document.getElementById("complaint-form");
        const reviewForm = document.getElementById("review-submission");
        const profileForm = document.getElementById("profile-form");
        const passwordForm = document.getElementById("password-form");
        const notificationForm = document.getElementById("notification-form");

        if (bookButton) {
          bookButton.addEventListener("click", function () {
            if (popup) popup.style.display = "flex";
          });
        }

        if (closeBtn) {
          closeBtn.addEventListener("click", function () {
            if (popup) popup.style.display = "none";
          });
        }

        if (popup) {
          window.addEventListener("click", function (event) {
            if (event.target === popup) {
              popup.style.display = "none";
            }
          });
        }

        if (maintenanceForm) {
          maintenanceForm.addEventListener("submit", async function (event) {
            event.preventDefault();
            event.stopPropagation();
            const issueType = document.getElementById("issue-type")?.value;
            const description = document.getElementById("description")?.value;
            const location = document.getElementById("location")?.value;
            const preferredDate = document.getElementById("preferred-date")?.value;

            console.log("Submitting maintenance request:", { issueType, description, location, preferredDate });
            try {
              const response = await fetch("/tenant/maintenance", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  issueType,
                  description,
                  location,
                  preferredDate,
                }),
              });
              const result = await response.json();
              console.log("Maintenance response:", result);
              if (result.success) {
                alert(result.message);
                addNewRequest(result.request);
                maintenanceForm.reset();
                if (popup) popup.style.display = "none";
              } else {
                alert(result.message || "Error submitting request");
              }
            } catch (error) {
              console.error("Maintenance form error:", error);
              alert("Error submitting request");
            }
          });
        }

        if (complaintForm) {
          complaintForm.addEventListener("submit", async function (event) {
            event.preventDefault();
            event.stopPropagation();
            const category = complaintForm.querySelector("select")?.value;
            const subject = complaintForm.querySelector("input")?.value;
            const description = complaintForm.querySelector("textarea")?.value;

            console.log("Submitting complaint:", { category, subject, description });
            try {
              const response = await fetch("/tenant/complaint", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ category, subject, description }),
              });
              const result = await response.json();
              console.log("Complaint response:", result);
              if (result.success) {
                alert(result.message);
                addNewComplaint(result.complaint);
                complaintForm.reset();
              } else {
                alert(result.message || "Error submitting complaint");
              }
            } catch (error) {
              console.error("Complaint form error:", error);
              alert("Error submitting complaint");
            }
          });
        }

        if (reviewForm) {
          reviewForm.addEventListener("click", async function () {
            const propertyId = document.getElementById("star-rating")?.dataset.propertyId;
            const rating = document.querySelectorAll("#star-rating span.active").length;
            const review = document.getElementById("review-text")?.value;

            if (!rating) {
              alert("Please select a rating");
              return;
            }

            console.log("Submitting review:", { propertyId, rating, review });
            try {
              const response = await fetch("/tenant/review", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ propertyId, rating, review }),
              });
              const result = await response.json();
              console.log("Review response:", result);
              if (result.success) {
                alert(result.message);
                addNewReview(result.rating);
                if (document.getElementById("review-text")) document.getElementById("review-text").value = "";
                document.querySelectorAll("#star-rating span").forEach(s => s.classList.remove("active"));
              } else {
                alert(result.message || "Error submitting review");
              }
            } catch (error) {
              console.error("Review form error:", error);
              alert("Error submitting review");
            }
          });
        }

        if (profileForm) {
          profileForm.addEventListener("submit", async function (event) {
            event.preventDefault();
            event.stopPropagation();
            const fullname = document.getElementById("fullname")?.value.trim();
            const email = document.getElementById("email")?.value.trim();
            const phone = document.getElementById("phone")?.value.trim();
            const location = document.getElementById("address")?.value.trim();

            if (!fullname || !email) {
              alert("Full name and email are required");
              return;
            }
            const nameParts = fullname.split(" ").filter(part => part);
            if (nameParts.length < 2) {
              alert("Please provide both first and last names");
              return;
            }
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
              alert("Please provide a valid email address");
              return;
            }

            const firstName = nameParts[0];
            const lastName = nameParts.slice(1).join(" ");

            console.log("Submitting profile update:", { firstName, lastName, email, phone, location });
            try {
              const response = await fetch("/tenant/profile", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  firstName,
                  lastName,
                  email,
                  phone,
                  location,
                }),
              });
              const result = await response.json();
              console.log("Profile update response:", result);
              if (result.success) {
                alert(result.message);
                if (document.getElementById("fullname")) {
                  document.getElementById("fullname").value = `${result.user.firstName} ${result.user.lastName}`;
                }
                if (document.getElementById("email")) {
                  document.getElementById("email").value = result.user.email;
                }
                if (document.getElementById("phone")) {
                  document.getElementById("phone").value = result.user.phone || '';
                }
                if (document.getElementById("address")) {
                  document.getElementById("address").value = result.user.location || '';
                }
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                alert(result.message || "Error updating profile");
              }
            } catch (error) {
              console.error("Profile form error:", error);
              alert("Error updating profile");
            }
          });
        }

        if (passwordForm) {
          passwordForm.addEventListener("submit", async function (event) {
            event.preventDefault();
            event.stopPropagation();
            const currentPassword = document.getElementById("current-password")?.value;
            const newPassword = document.getElementById("new-password")?.value;
            const confirmPassword = document.getElementById("confirm-password")?.value;

            if (!currentPassword || !newPassword || !confirmPassword) {
              alert("All password fields are required");
              return;
            }
            if (newPassword !== confirmPassword) {
              alert("New passwords do not match");
              return;
            }
            if (newPassword.length < 6) {
              alert("New password must be at least 6 characters");
              return;
            }

            console.log("Submitting password change:", { currentPassword, newPassword });
            try {
              const response = await fetch("/tenant/password", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ currentPassword, newPassword }),
              });
              const result = await response.json();
              console.log("Password change response:", result);
              if (result.success) {
                alert(result.message);
                passwordForm.reset();
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                alert(result.message || "Error changing password");
              }
            } catch (error) {
              console.error("Password form error:", error);
              alert("Error changing password");
            }
          });
        }

        if (notificationForm) {
          notificationForm.addEventListener("submit", async function (event) {
            event.preventDefault();
            event.stopPropagation();
            const emailNotifications = document.getElementById("email-notifications")?.checked;
            const smsNotifications = document.getElementById("sms-notifications")?.checked;
            const rentReminders = document.getElementById("rent-reminders")?.checked;
            const maintenanceUpdates = document.getElementById("maintenance-updates")?.checked;
            const newListings = document.getElementById("new-listings")?.checked;

            console.log("Submitting notification preferences:", {
              emailNotifications,
              smsNotifications,
              rentReminders,
              maintenanceUpdates,
              newListings,
            });
            try {
              const response = await fetch("/tenant/notifications", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  emailNotifications,
                  smsNotifications,
                  rentReminders,
                  maintenanceUpdates,
                  newListings,
                }),
              });
              const result = await response.json();
              console.log("Notification preferences response:", result);
              if (result.success) {
                alert(result.message);
                if (document.getElementById("email-notifications")) {
                  document.getElementById("email-notifications").checked = result.user.emailNotifications;
                }
                if (document.getElementById("sms-notifications")) {
                  document.getElementById("sms-notifications").checked = result.user.smsNotifications;
                }
                if (document.getElementById("rent-reminders")) {
                  document.getElementById("rent-reminders").checked = result.user.rentReminders;
                }
                if (document.getElementById("maintenance-updates")) {
                  document.getElementById("maintenance-updates").checked = result.user.maintenanceUpdates;
                }
                if (document.getElementById("new-listings")) {
                  document.getElementById("new-listings").checked = result.user.newListings;
                }
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                alert(result.message || "Error updating preferences");
              }
            } catch (error) {
              console.error("Notification form error:", error);
              alert("Error updating preferences");
            }
          });
        }

        async function removeSavedProperty(propertyId) {
          console.log("Removing saved property:", { propertyId });
          try {
            const response = await fetch("/tenant/saved-property", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ propertyId, action: "remove" }),
            });
            if (!response.ok) {
              throw new Error(`Server error: ${response.status}`);
            }
            const result = await response.json();
            console.log("Remove property response:", result);
            if (result.success) {
              showNotification(result.message || "Property removed successfully", "success");
              const propertyCard = document.querySelector(`.property-card[data-property-id="${propertyId}"]`);
              if (propertyCard) {
                propertyCard.remove();
              } else {
                console.warn(`Property card with ID ${propertyId} not found in DOM`);
              }
            } else {
              showNotification(result.message || "Error removing property", "error");
            }
          } catch (error) {
            console.error("Remove property error:", error);
            showNotification("Failed to remove property. Please try again.", "error");
          }
        }

        function showNotification(message, type) {
          alert(message);
        }

        document.addEventListener("click", (event) => {
          if (event.target.classList.contains("remove-button")) {
            const propertyId = event.target.dataset.propertyId;
            if (propertyId) {
              removeSavedProperty(propertyId);
            }
          }
        });

        function addNewRequest(request) {
          const activeRequestsContainer = document.querySelector(".maintenance-cards");
          if (activeRequestsContainer) {
            const newCard = document.createElement("div");
            newCard.className = "maintenance-card";
            newCard.innerHTML = `
              <div class="maintenance-header">
                <h5>${request.issueType || 'Unknown'} Issue</h5>
                <span class="status pending">Pending</span>
              </div>
              <p><strong>Date Reported:</strong> ${request.dateReported ? new Date(request.dateReported).toLocaleDateString() : 'N/A'}</p>
              <p><strong>Description:</strong> ${request.description || 'N/A'}</p>
              <p><strong>Location:</strong> ${request.location || 'N/A'}</p>
              ${request.scheduledDate ? `<p><strong>Preferred Date:</strong> ${new Date(request.scheduledDate).toLocaleDateString()}</p>` : ""}
              <p><strong>Assigned To:</strong> Awaiting assignment</p>
              <button class="small-button">Update</button>
            `;
            activeRequestsContainer.insertBefore(newCard, activeRequestsContainer.firstChild);
          }
        }

        function addNewComplaint(complaint) {
          const complaintsContainer = document.querySelector(".complaints-history");
          if (complaintsContainer) {
            const newItem = document.createElement("div");
            newItem.className = "complaint-item";
            newItem.innerHTML = `
              <div class="complaint-header">
                <h5>${complaint.subject || 'N/A'}</h5>
                <span class="status open">Open</span>
              </div>
              <p><strong>Date:</strong> ${complaint.dateSubmitted ? new Date(complaint.dateSubmitted).toLocaleDateString() : 'N/A'}</p>
              <p><strong>Description:</strong> ${complaint.description || 'N/A'}</p>
            `;
            complaintsContainer.insertBefore(newItem, complaintsContainer.firstChild);
          }
        }

        function addNewReview(rating) {
          const reviewsContainer = document.querySelector(".past-reviews");
          if (reviewsContainer) {
            const newCard = document.createElement("div");
            newCard.className = "review-card";
            newCard.innerHTML = `
              <div class="review-header">
                <h5>${rating.propertyId && rating.propertyId.name ? rating.propertyId.name : 'Unknown Property'}</h5>
                <div class="rating">${rating.rating ? "⭐".repeat(rating.rating) : ''} ${rating.rating ? rating.rating.toFixed(1) : 'N/A'}</div>
              </div>
              <p class="review-date">Reviewed on: ${rating.date ? new Date(rating.date).toLocaleDateString() : 'N/A'}</p>
              <p class="review-text">${rating.review || 'No review provided'}</p>
            `;
            reviewsContainer.insertBefore(newCard, reviewsContainer.firstChild);
          }
        }

        const stars = document.querySelectorAll("#star-rating span");
        stars.forEach((star, index) => {
          star.addEventListener("click", () => {
            stars.forEach((s, i) => {
              s.classList.toggle("active", i <= index);
            });
          });
        });

        if (window.location.hash === '#settings') {
          showSection('settings');
        } else {
          showSection('home');
        }

        document.querySelectorAll('form').forEach(form => {
          form.addEventListener('submit', (event) => {
            event.preventDefault();
            event.stopPropagation();
          });
        });
      });
    </script>
  </body>
</html>