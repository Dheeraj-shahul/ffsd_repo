<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tenant Dashboard - RentEase</title>
    <link rel="stylesheet" href="/css/user_dashboard.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <style>
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px;
        border-radius: 5px;
        color: white;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.5s;
      }
      .notification.success { background-color: #4caf50; }
      .notification.error { background-color: #f44336; }
      .notification.show { opacity: 1; }
      .notification-card{padding: 20px;}

    </style>
  </head>
  <body>
    <!-- Header -->
    <%- include('../partials/header') %>

    <div class="overlay" id="overlay"></div>
    <button class="menu-toggle" onclick="toggleMenu()">
      <strong>></strong>
    </button>
    <div class="dashboard-container">
      <!-- Sidebar Navigation -->
      <div class="sidebar" id="sidebar">
        <h2>Tenant Dashboard</h2>
        <ul>
          <li onclick="showSection('home')">
            <i class="fa-solid fa-house"></i> Home
          </li>
          <li onclick="showSection('rentPayments')">
            <i class="fa-solid fa-hand-holding-dollar"></i> Rent Payments
          </li>
          <li onclick="showSection('maintenance')">
            <i class="fa-solid fa-screwdriver-wrench"></i> Maintenance
          </li>
          <li onclick="showSection('complaints')">
            <i class="fa-solid fa-comments"></i> Complaints
          </li>
          <li onclick="showSection('movers')">
            <i class="fa-solid fa-users"></i> Domestic Workers
          </li>
          <li onclick="showSection('notifications')">
            <i class="fa-solid fa-bell"></i> Notifications
          </li>
          <li onclick="showSection('savedListings')">
            <i class="fa-solid fa-bookmark"></i> Saved Listings
          </li>
          <li onclick="showSection('ratings')">
            <i class="fa-solid fa-star-half-stroke"></i> Reviews & Ratings
          </li>
          <li onclick="showSection('settings')">
            <i class="fa-solid fa-gears"></i> Settings
          </li>
        </ul>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <!-- Home Section -->
        <div id="home" class="section active">
          <h3>Welcome, <%= user.firstName %> <%= user.lastName %></h3>
          <% if (currentProperty) { %>
          <div class="property-summary">
            <h4>Currently Renting</h4>
            <div class="property-card" id="home_property_card">
              <div class="img_container">
                <img
                  src="<%= currentProperty.images && currentProperty.images[0] ? currentProperty.images[0] : '/images/default-property.jpg' %>"
                  alt="Property Image"
                />
              </div>
              <div class="property-details">
                <p>
                  <strong>Property:</strong> <%= currentProperty.subtype || '' %> <%= currentProperty.name || 'N/A' %>
                </p>
                <p><strong>Address:</strong> <%= currentProperty.address || 'N/A' %></p>
                <p>
                  <strong>Owner:</strong> <%= propertyOwner ? propertyOwner.firstName + ' ' + propertyOwner.lastName : 'N/A' %>
                </p>
                <p>
                  <strong>Contact:</strong> <%= propertyOwner ? propertyOwner.email : 'N/A' %>
                </p>
                <p>
                  <strong>Monthly Rent:</strong> ₹<%= currentProperty.price || 'N/A' %>
                </p>
              </div>
              <button id="unrent-btn" class="unrent-btn">Request Unrent</button>
                <div id="unrent-modal" class="modal" style="display:none;">
                  <div class="modal-content">
                    <span class="close" id="close-unrent-modal">&times;</span>
                    <h4>Unrent Property</h4>
                    <p>Are you sure you want to request to unrent this property?</p>
                    <textarea id="unrent-reason" placeholder="Reason (optional)" style="width:100%;margin-bottom:10px;"></textarea>
                    <button id="confirm-unrent" class="btn btn-danger">Confirm Unrent</button>
                  </div>
                </div>
                <script>
                  document.getElementById('unrent-btn').onclick = function() {
                    document.getElementById('unrent-modal').style.display = 'block';
                  };
                  document.getElementById('close-unrent-modal').onclick = function() {
                    document.getElementById('unrent-modal').style.display = 'none';
                  };
                  document.getElementById('confirm-unrent').onclick = function() {
                    const reason = document.getElementById('unrent-reason').value;
                    fetch('/tenant/unrent-property', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ reason })
                    })
                    .then(res => res.json())
                    .then(data => {
                      alert(data.message);
                      if (data.success) location.reload();
                    });
                  };
                </script>
            </div>
          </div>
          <div class="quick-stats">
            <div class="stat-box">
              <h4>Active Maintenance</h4>
              <p><%= activeMaintenanceRequests ? activeMaintenanceRequests.length : 0 %> Pending Requests</p>
            </div>
            <div class="stat-box">
              <h4>Saved Properties</h4>
              <p><%= user.savedListings ? user.savedListings.length : 0 %> Properties</p>
            </div>
          </div>
          <% } else { %>
          <p>No current property rented.</p>
          <% } %>
          <!-- Show Unrent Request Status -->
          <% if (notifications && notifications.length > 0) { %>
            <div class="unrent-status">
              <h4>Unrent Requests</h4>
              <% notifications.forEach(function(n) { if (n.type === 'Unrent Request') { %>
                <div class="unrent-request-status">
                  <strong>Status:</strong> <%= n.status %> <br>
                  <strong>Reason:</strong> <%= n.unrentReason || n.reason || 'N/A' %> <br>
                  <strong>Date:</strong> <%= n.createdDate ? new Date(n.createdDate).toLocaleDateString() : 'N/A' %>
                </div>
              <% } }); %>
            </div>
          <% } %>
        </div>

        <!-- Rent Payments Section -->
        <div id="rentPayments" class="section">
          <h3>Rent Payments</h3>
          <% if (currentProperty) { %>
          <div class="current-rent">
            <% if (nextPayment) { %>
            <p>
              Next Rent Due: <strong>₹<%= nextPayment.amount %></strong> on <%= new Date(nextPayment.dueDate).toLocaleDateString() %>
            </p>
            <% } else { %>
            <p>No rent due date available.</p>
            <% } %>
            <button class="pay-buttons" onclick="checkRecentPayment()">Pay Rent</button>
          </div>
          <% } else { %>
          <p>No current property rented.</p>
          <% } %>
          <h4>Payment History</h4>
          <div id="payment-history-container">
            <table class="payment-history">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Amount</th>
                  <th>Payment Method</th>
                  <th>Status</th>
                  <th>Receipt</th>
                </tr>
              </thead>
              <tbody>
                <% (payments || []).forEach(payment => { %>
                <tr>
                  <td>
                    <%= payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : 'N/A' %>
                  </td>
                  <td>₹<%= payment.amount || 'N/A' %></td>
                  <td><%= payment.paymentMethod || 'N/A' %></td>
                  <td class="<%= payment.status ? payment.status.toLowerCase() : '' %>">
                    <%= payment.status || 'N/A' %>
                  </td>
                  <td><a href="<%= payment.receiptUrl || '#' %>">View</a></td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>

          <!-- Payment Popup -->
          <div id="payment-popup-container" class="popup-container" style="display: none;">
            <div class="popup-content">
              <span class="close-btn" onclick="closePaymentPopup()">×</span>
              <h3>Pay Rent</h3>
              <form id="payment-form" action="/tenant/payment">
                <div class="form-group">
                  <label for="rent-amount">Rent Amount (₹):</label>
                  <input
                    type="number"
                    id="rent-amount"
                    value="<%= currentProperty ? currentProperty.price : '' %>"
                    readonly
                  />
                </div>
                <div class="form-group">
                  <label for="payment-method">Payment Method:</label>
                  <select id="payment-method" required>
                    <option value="">Select Payment Method</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Debit Card">Debit Card</option>
                    <option value="UPI">UPI</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="transaction-id">Transaction ID:</label>
                  <input
                    type="text"
                    id="transaction-id"
                    placeholder="Enter transaction ID"
                    required
                  />
                </div>
                <div class="form-group">
                  <button type="submit" class="submit-btn">Submit Payment</button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Maintenance Request Section -->
        <div id="maintenance" class="section">
          <h3>Maintenance Requests</h3>
          <button class="book-button">Submit New Request</button>
          <h4>Active Requests</h4>
          <div class="maintenance-cards">
            <% (activeMaintenanceRequests || []).forEach(request => { %>
            <div class="maintenance-card">
              <div class="maintenance-header">
                <h5><%= request.issueType || 'Unknown' %> Issue</h5>
                <span
                  class="status <%= request.status ? request.status.toLowerCase().replace(' ', '-') : 'pending' %>"
                ><%= request.status || 'Pending' %></span>
              </div>
              <p>
                <strong>Date Reported:</strong> <%= request.scheduledDate ? new Date(request.scheduledDate).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= request.description || 'N/A' %></p>
              <p><strong>Location:</strong> <%= request.location || 'N/A' %></p>
              <p>
                <strong>Assigned To:</strong> <%= request.assignedTo || 'Awaiting assignment' %>
              </p>
              <button class="small-button">Update</button>
            </div>
            <% }); %>
          </div>
          <h4>Completed Requests</h4>
          <div class="maintenance-cards">
            <% (completedMaintenanceRequests || []).forEach(request => { %>
            <div class="maintenance-card">
              <div class="maintenance-header">
                <h5><%= request.issueType || 'Unknown' %> Issue</h5>
                <span class="status completed">Completed</span>
              </div>
              <p>
                <strong>Date Reported:</strong> <%= request.createdAt ? new Date(request.createdAt).toLocaleDateString() : 'N/A' %>
              </p>
              <p>
                <strong>Date Completed:</strong> <%= request.updatedAt ? new Date(request.updatedAt).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= request.description || 'N/A' %></p>
              <!-- <p>
                <strong>Serviced By:</strong> <%= request.assignedTo || 'N/A' %>
              </p> -->
            </div>
            <% }); %>
          </div>
        </div>

        <div id="maintenance-request-popup" class="popup-container">
          <div class="popup-content">
            <span class="close-btn">×</span>
            <h3>Submit Maintenance Request</h3>
            <form id="maintenance-request-form">
              <div class="form-group">
                <label for="issue-type">Issue Type:</label>
                <select id="issue-type" required>
                  <option value="">Select an issue type</option>
                  <option value="Plumbing">Plumbing</option>
                  <option value="Electrical">Electrical</option>
                  <option value="HVAC">HVAC/AC</option>
                  <option value="Appliance">Appliance</option>
                  <option value="Structural">Structural</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              <div class="form-group">
                <label for="description">Description:</label>
                <textarea
                  id="description"
                  rows="4"
                  placeholder="Please describe the issue in detail"
                  required
                ></textarea>
              </div>
              <div class="form-group">
                <label for="location">Location:</label>
                <input
                  type="text"
                  id="location"
                  placeholder="e.g., Kitchen, Bathroom, Living Room"
                  required
                />
              </div>
              <div class="form-group">
                <label for="preferred-date">Date</label>
                <input type="date" id="preferred-date" />
              </div>
              <div class="form-group">
                <button type="submit" class="submit-btn">Submit Request</button>
              </div>
            </form>
          </div>
        </div>

        <div id="delete-account-popup" class="popup-container" style="display: none;">
          <div class="popup-content">
            <span class="close-btn" onclick="closeDeleteAccountPopup()">×</span>
            <h3>Confirm Account Deletion</h3>
            <p>This action will permanently delete your account and all associated data. Please enter your password to confirm.</p>
            <form id="delete-account-form">
              <div class="form-group">
                <label for="delete-password">Password:</label>
                <input type="password" id="delete-password" required />
              </div>
              <div class="form-group">
                <button type="submit" class="submit-btn">Confirm Deletion</button>
              </div>
            </form>
          </div>
        </div>

        <!-- Complaint Submission Section -->
        <div id="complaints" class="section">
          <h3>Submit a Query / Complaint</h3>
          <form class="query-form" id="complaint-form">
            <select required>
              <option value="" disabled selected>Select Category</option>
              <option value="rent">Rent Related</option>
              <option value="property">Property Issues</option>
              <option value="neighbor">Neighbor Complaints</option>
              <option value="service">Service Quality</option>
              <option value="other">Other</option>
            </select>
            <input
              type="text"
              placeholder="Subject"
              class="query-text-input"
              required
            />
            <textarea
              class="query-text-input"
              rows="4"
              placeholder="Describe your issue..."
              required
            ></textarea>
            <button type="submit">Submit Complaint</button>
          </form>
          <h4>Previous Complaints</h4>
          <div class="complaints-history">
            <% (complaints || []).forEach(complaint => { %>
            <div class="complaint-item">
              <div class="complaint-header">
                <h5><%= complaint.subject || 'N/A' %></h5>
                <span
                  class="status <%= complaint.status ? complaint.status.toLowerCase().replace(' ', '-') : 'open' %>"
                ><%= complaint.status || 'Open' %></span>
              </div>
              <p>
                <strong>Date:</strong> <%= complaint.dateSubmitted ? new Date(complaint.dateSubmitted).toLocaleDateString() : 'N/A' %>
              </p>
              <p><strong>Description:</strong> <%= complaint.description || 'N/A' %></p>
              <% if (complaint.response) { %>
              <p><strong>Response:</strong> <%= complaint.response %></p>
              <% } %>
            </div>
            <% }); %>
          </div>
        </div>

       <!-- Domestic Workers Booking -->
<div id="movers" class="section">
  <!-- Worker Payment Popup -->
  <div id="worker-payment-popup" class="popup-container" style="display: none;">
    <div class="popup-content">
      <span class="close-btn" onclick="closeWorkerPaymentPopup()">×</span>
      <h3>Pay Worker</h3>
      <form id="worker-payment-form">
        <div class="form-group">
          <label for="worker-name">Worker Name:</label>
          <input type="text" id="worker-name" readonly />
          <input type="hidden" id="worker-id" />
        </div>
        
        <div class="form-group">
          <label for="service-type">Service Type:</label>
          <input type="text" id="service-type" readonly />
        </div>
        
        <div class="form-group">
          <label for="payment-amount">Payment Amount (₹):</label>
          <input type="number" id="payment-amount" readonly />
        </div>
        
        <div class="form-group">
          <label for="payment-date">Payment Date:</label>
          <input type="date" id="payment-date" required />
        </div>
        
        <div class="form-group">
          <label for="worker-payment-method">Payment Method:</label>
          <select id="worker-payment-method" required>
            <option value="">Select Payment Method</option>
            <option value="UPI">UPI</option>
            <option value="Bank Transfer">Bank Transfer</option>
            <option value="Digital Wallet">Digital Wallet</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="worker-transaction-id">Transaction ID (if applicable):</label>
          <input type="text" id="worker-transaction-id" placeholder="Enter transaction ID for digital payments" />
        </div>
        
        <div class="form-group">
          <label for="payment-notes">Notes (optional):</label>
          <textarea id="payment-notes" rows="3" placeholder="Additional notes about this payment"></textarea>
        </div>
        
        <div class="form-group">
          <button type="submit" class="submit-btn">Submit Payment</button>
        </div>
      </form>
    </div>
  </div>
  <h3>Domestic Worker Services</h3>
  <p>Book verified domestic workers nearby to complete your daily chores.</p>
  <div class="service-categories">
    <div class="service-category">
      <h4>Cleaning Services</h4>
      <p>Professional house cleaning</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=cleaning'">Find Cleaners</button>
    </div>
    <div class="service-category">
      <h4>Cooking Services</h4>
      <p>Skilled cooks for daily meals</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=cooking'">Find Cooks</button>
    </div>
    <div class="service-category">
      <h4>Laundry Services</h4>
      <p>Washing and ironing services</p>
      <button class="book-button" onclick="location.href='/workerDetails?service=laundry'">Find Help</button>
    </div>
  </div>
  <h4>Your Current Service Providers</h4>
  <div class="worker-cards">
    <% if (workers && workers.length > 0) { %>
      <% workers.forEach((worker, index) => { %>
        <div class="worker-card" data-worker-id="<%= worker._id || `worker_${index}` %>">
          <img src="<%= worker.image || '/resources/default-worker.jpg' %>" alt="Worker Photo" />
          <div class="worker-details">
            <h5 class="worker-name"><%= worker.firstName %> <%= worker.lastName %></h5>
            <p><strong>Service:</strong> <span class="worker-service"><%= worker.serviceType || 'N/A' %></span></p>
            <p><strong>Schedule:</strong> <span class="worker-schedule"><%= worker.availability || 'N/A' %></span></p>
            <p><strong>Fee:</strong> ₹<span class="worker-fee"><%= worker.price || 'N/A' %></span> <span class="worker-rate-unit"><%= worker.rateUnit ? '/' + worker.rateUnit : '' %></span></p>
            <p><strong>Experience:</strong> <span class="worker-experience"><%= worker.experience ? worker.experience + ' years' : 'N/A' %></span></p>
            <p><strong>Phone:</strong> <span class="worker-phone"><%= worker.phone || 'N/A' %></span></p>
            
            <div class="rating">
              <% if (worker.ratingId && worker.ratingId.average) { %>
                <span class="worker-rating"><%= '⭐'.repeat(Math.round(worker.ratingId.average)) %> <%= worker.ratingId.average.toFixed(1) %></span>
              <% } else { %>
                <span class="worker-rating">No ratings yet</span>
              <% } %>
            </div>
            
            <div class="worker-payment-section">
              <h6>Payment</h6>
              <!-- <p>Last Payment: <span class="last-payment-date"><%= worker.lastPaymentDate ? new Date(worker.lastPaymentDate).toLocaleDateString() : 'Never' %></span></p> -->
              <!-- <p>Status: <span class="payment-status <%= worker.paymentStatus === 'paid' ? 'status-paid' : 'status-pending' %>"><%= worker.paymentStatus === 'paid' ? 'Paid' : 'Pending' %></span></p> -->
              <button class="pay-worker-btn" onclick="showWorkerPaymentPopup(this)" <%= worker.paymentStatus === 'paid' ? 'disabled' : '' %>>
                <%= worker.paymentStatus === 'paid' ? 'Paid' : 'Pay Worker' %>
              </button>
              <!-- <button class="book-button" onclick="viewWorkerProfile(this)">View Profile</button> -->
              <button class="debook-worker-btn" style="background-color: red; color: white;" onclick="debookWorker('<%= worker._id %>')">Debook</button>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="no-workers-message">
        <p>You don't have any domestic workers assigned yet. Browse the services above to find help.</p>
      </div>
    <% } %>
  </div>
  <h4>Worker Payment History</h4>
  <table class="payment-history-table">
    <thead>
      <tr>
        <th>Date</th>
        <th>Worker</th>
        <th>Service</th>
        <th>Amount</th>
        <th>Payment Method</th>
        <th>Status</th>
        <th>Receipt</th>
      </tr>
    </thead>
    <tbody id="worker-payment-history-body">
      <% (workerPayments || []).forEach(payment => { %>
        <tr>
          <td><%= payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : 'N/A' %></td>
          <td><%= payment.workerName || 'N/A' %></td>
          <td><%= payment.serviceType || 'N/A' %></td>
          <td>₹<%= payment.amount || 'N/A' %></td>
          <td><%= payment.paymentMethod || 'N/A' %></td>
          <td class="<%= payment.status ? payment.status.toLowerCase() : 'completed' %>">
            <%= payment.status || 'Completed' %>
          </td>
          <td><a href="<%= payment.receiptUrl || '#' %>">View</a></td>
        </tr>
      <% }); %>
    </tbody>
  </table>
</div>



        <!-- Notifications Section -->
        <div id="notifications" class="section">
          <h3>Notifications</h3>
          <div class="notification-container">
            <% if (notifications && Array.isArray(notifications) && notifications.length > 0) { %>
              <% notifications.forEach(notification => { %>
                <div class="notification-card <%= notification.read ? 'read' : 'unread' %>" data-notification-id="<%= notification._id %>">
                  <p><strong>From:</strong> <%= notification.workerName || notification.propertyName || 'System' %></p>
                  <p><strong>Message:</strong> <%= notification.message %></p>
                  <p><strong>Date:</strong> <%= notification.createdDate.toLocaleString() %></p>
                  <p><strong>Status:</strong> <span class="notification-status <%= notification.status.toLowerCase() %>"><%= notification.status %></span></p>
                  <p><strong>Read:</strong> <%= notification.read ? 'Read' : 'Unread' %></p>
                  <% if (!notification.read) { %>
                    <button class="mark-read-button" data-notification-id="<%= notification._id %>">Mark as Read</button>
                  <% } %>
                </div>
              <% }) %>
            <% } else { %>
              <p>No notifications available.</p>
            <% } %>
          </div>
        </div>

                <!-- Saved Listings -->
        <div id="savedListings" class="section">
          <h3>Saved Listings</h3>
          <p>
            You have saved <%= user.savedListings ? user.savedListings.length : 0 %> properties for future reference.
          </p>
          <div class="saved-properties">
            <% (user.savedListings || []).forEach(property => { %>
            <div class="property-card" data-property-id="<%= property._id %>">
              <div class="img_container">
                <img
                  src="<%= property.images && property.images[0] ? property.images[0] : '/images/default-property.jpg' %>"
                  alt="Property Image"
                />
              </div>
              <div class="property-info">
                <h4><%= property.name || 'N/A' %></h4>
                <p><strong>Location:</strong> <%= property.location || 'N/A' %></p>
                <p><strong>Rent:</strong> ₹<%= property.price || 'N/A' %>/month</p>
                <p>
                  <strong>Available From:</strong> <%= property.availableFrom ? new Date(property.availableFrom).toLocaleDateString() : 'Immediate' %>
                </p>
                <div class="property-features">
                  <span><%= property.subtype || 'N/A' %></span>
                  <span><%= property.size || 'N/A' %></span>
                  <span><%= property.furnished || 'N/A' %></span>
                </div>
                <div class="card-actions">
                  <button class="book-button" onclick="location.href='/book-property?id=<%= property._id %>'">Book Now</button>
                  <a href="/property?id=<%= property._id %>" class="view-details book-button">View Details</a>
                  <button class="remove-button" data-property-id="<%= property._id %>">
                    Remove
                  </button>
                </div>
              </div>
            </div>
            <% }); %>
            <% if (!user.savedListings || user.savedListings.length === 0) { %>
              <p>No saved properties yet. Browse properties to save your favorites!</p>
            <% } %>
          </div>
        </div>
        <!-- Reviews & Ratings Section -->
        <div id="ratings" class="section">
          <h3>Reviews & Ratings</h3>
          <h4>Your Property Reviews</h4>
          <% if (currentProperty) { %>
          <div class="review-form">
            <h5>Review Your Current Property</h5>
            <div class="star-rating">
             <span>Rate your experience: </span>
             <div class="stars" id="star-rating" data-property-id="<%= currentProperty._id %>">
               <span class="star" data-rating="1"><i class="far fa-star"></i></span>
               <span class="star" data-rating="2"><i class="far fa-star"></i></span>
               <span class="star" data-rating="3"><i class="far fa-star"></i></span>
               <span class="star" data-rating="4"><i class="far fa-star"></i></span>
               <span class="star" data-rating="5"><i class="far fa-star"></i></span>
             </div>
           </div>

            <textarea
              rows="4"
              placeholder="Share your experience living here..."
              id="review-text"
            ></textarea>
            <button type="submit" id="review-submission">Submit Review</button>
          </div>
          <% } %>
          <h4>Past Reviews</h4>
          <div class="past-reviews">
            <% (ratings || []).forEach(rating => { %>
            <div class="review-card">
              <div class="review-header">
                <h5><%= rating.propertyId && rating.propertyId.name ? rating.propertyId.name : 'Unknown Property' %></h5>
                <div class="rating">
                  <%= rating.rating ? '⭐'.repeat(rating.rating) : '' %> <%= rating.rating ? rating.rating.toFixed(1) : 'N/A' %>
                </div>
              </div>
              <p class="review-date">
                Reviewed on: <%= rating.date ? new Date(rating.date).toLocaleDateString() : 'N/A' %>
              </p>
              <p class="review-text"><%= rating.review || 'No review provided' %></p>
            </div>
            <% }); %>
          </div>
        </div>

        <!-- Settings -->
        <div id="settings" class="section">
          <h3>Account Settings</h3>
          <div class="settings-container">
            <div id="profile-section">
              <h4>Personal Information</h4>
              <form class="profile-form" id="profile-form">
                <div class="form-group">
                  <label for="fullname">Full Name</label>
                  <input
                    type="text"
                    id="fullname"
                    value="<%= user.firstName %> <%= user.lastName %>"
                  />
                </div>
                <div class="form-group">
                  <label for="email">Email Address</label>
                  <input type="email" id="email" value="<%= user.email %>" />
                </div>
                <div class="form-group">
                  <label for="phone">Phone Number</label>
                  <input type="tel" id="phone" value="<%= user.phone || '' %>" />
                </div>
                <div class="form-group">
                  <label for="address">Current Address</label>
                  <textarea id="address"><%= user.location || '' %></textarea>
                </div>
                <button type="submit" class="settings-submission-class book-button">
                  Update Profile
                </button>
              </form>
            </div>
            <div id="security-section">
              <h4>Security Settings</h4>
              <form class="password-form" id="password-form">
                <div class="form-group">
                  <label for="current-password">Current Password</label>
                  <input type="password" id="current-password" />
                </div>
                <div class="form-group">
                  <label for="new-password">New Password</label>
                  <input type="password" id="new-password" />
                </div>
                <div class="form-group">
                  <label for="confirm-password">Confirm New Password</label>
                  <input type="password" id="confirm-password" />
                </div>
                <button type="submit" class="settings-submission-class book-button">
                  Change Password
                </button>
              </form>
            </div>
            <div id="preferences-section">
              <h4>Notification Preferences</h4>
              <form class="notification-form" id="notification-form">
                <div class="checkbox-group">
                  <label for="email-notifications">Email Notifications</label>
                  <input type="checkbox" id="email-notifications" <%= user.emailNotifications ? 'checked' : '' %> />
                  <label for="email-notifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="sms-notifications">SMS Notifications</label>
                  <input type="checkbox" id="sms-notifications" <%= user.smsNotifications ? 'checked' : '' %> />
                  <label for="sms-notifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="rent-reminders">Rent Due Reminders</label>
                  <input type="checkbox" id="rent-reminders" <%= user.rentReminders ? 'checked' : '' %> />
                  <label for="rent-reminders" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="maintenance-updates">Maintenance Updates</label>
                  <input type="checkbox" id="maintenance-updates" <%= user.maintenanceUpdates ? 'checked' : '' %> />
                  <label for="maintenance-updates" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="new-listings">New Property Listings</label>
                  <input type="checkbox" id="new-listings" <%= user.newListings ? 'checked' : '' %> />
                  <label for="new-listings" class="button"></label>
                </div>
                <button type="submit" class="settings-submission-class book-button">
                  Save Preferences
                </button>
              </form>
            </div>
            <div id="delete-account-section">
              <h4>Delete Account</h4>
              <button class="settings-submission-class delete-account-btn remove-button" >Delete Account</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>

      function debookWorker(workerId) {
  if (!workerId) {
    showNotification('Invalid worker ID', 'error');
    return;
  }

  if (confirm('Are you sure you want to debook this worker? Please ensure you have completed this month\'s payment before proceeding.')) {
    const button = event.target;
    const originalText = button.textContent;
    
    button.disabled = true;
    button.textContent = 'Debooking...';
    
    fetch(`/api/workers/debook/${workerId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showNotification(data.message || 'Worker debooked successfully', 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else if (data.error === 'Payment pending for this month' || data.message === 'Please complete this month\'s payment before debooking the worker.') {
        showNotification('Payment Required: Please complete this month\'s payment before debooking the worker.', 'error');
        button.disabled = false;
        button.textContent = originalText;
      } else {
        showNotification('Error: ' + (data.error || data.message || 'Unknown error occurred'), 'error');
        button.disabled = false;
        button.textContent = originalText;
      }
    })
    .catch(error => {
      console.error('Debooking error:', error);
      showNotification('Network error: ' + error.message, 'error');
      button.disabled = false;
      button.textContent = originalText;
    });
  }
}

      function showDeleteAccountPopup() {
  const popup = document.getElementById("delete-account-popup");
  if (popup) {
    popup.style.display = "flex";
  }
}

function closeDeleteAccountPopup() {
  const popup = document.getElementById("delete-account-popup");
  if (popup) {
    popup.style.display = "none";
  }
}

async function deleteAccount(password) {
  console.log("Attempting to delete account");
  try {
    const response = await fetch("/tenant/delete-account", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ password }),
    });
    const result = await response.json();
    console.log("Delete account response:", result);
    if (result.success) {
      showNotification(result.message, "success");
      setTimeout(() => {
        window.location.href = "/logout";
      }, 2000);
    } else {
      showNotification(result.message || "Error deleting account", "error");
    }
  } catch (error) {
    console.error("Delete account error:", error);
    showNotification("Failed to delete account. Please try again.", "error");
  }
}

// Add this inside the DOMContentLoaded event listener, after the existing event listeners
const deleteAccountForm = document.getElementById("delete-account-form");
const deleteAccountBtn = document.querySelector(".delete-account-btn");

if (deleteAccountBtn) {
  deleteAccountBtn.addEventListener("click", async () => {
    console.log("Delete account button clicked");
    try {
      const response = await fetch("/tenant/check-account-status", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      });
      const result = await response.json();
      console.log("Check account status response:", result);
      if (result.success && !result.hasActiveRentals && !result.hasActiveBookings) {
        showDeleteAccountPopup();
      } else {
        showNotification(
          result.message || "Cannot delete account due to active rentals or worker bookings",
          "error"
        );
      }
    } catch (error) {
      console.error("Check account status error:", error);
      showNotification("Error checking account status", "error");
    }
  });
}

if (deleteAccountForm) {
  deleteAccountForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    const password = document.getElementById("delete-password")?.value;
    if (!password) {
      showNotification("Password is required", "error");
      return;
    }
    await deleteAccount(password);
    closeDeleteAccountPopup();
  });
}
      function showSection(sectionId) {
        console.log("Showing section:", sectionId);
        const sections = document.querySelectorAll(".section");
        sections.forEach((section) => section.classList.remove("active"));
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
          targetSection.classList.add("active");
        } else {
          console.error("Section not found:", sectionId);
        }
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        if (window.innerWidth <= 768 && sidebar && menuButton) {
          sidebar.classList.remove("active");
          menuButton.innerHTML = "<strong>></strong>";
        }
      }

      function toggleMenu() {
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        if (sidebar && menuButton) {
          sidebar.classList.toggle("active");
          menuButton.innerHTML = sidebar.classList.contains("active")
            ? "<strong><</strong>"
            : "<strong>></strong>";
        }
      }

      function toggleNav() {
        const navMenu = document.getElementById("nav-menu");
        const overlay = document.getElementById("overlay");
        if (navMenu && overlay) {
          navMenu.classList.toggle("active");
          overlay.classList.toggle("active");
        }
      }

      function showNotification(message, type) {
        const notification = document.createElement("div");
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        setTimeout(() => notification.classList.add("show"), 100);
        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => notification.remove(), 500);
        }, 3000);
      }

      async function markNotificationAsRead(notificationId) {
        console.log("Marking notification as read:", { notificationId });
        try {
          const response = await fetch("/tenant/notification/read", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ notificationId }),
          });
          const result = await response.json();
          console.log("Mark notification response:", result);
          if (result.success) {
            showNotification(result.message || "Notification marked as read", "success");
            const notificationCard = document.querySelector(`.notification-card[data-notification-id="${notificationId}"]`);
            if (notificationCard) {
              notificationCard.classList.remove("unread");
              notificationCard.classList.add("read");
              const readStatus = notificationCard.querySelector("p:nth-child(5)");
              if (readStatus) readStatus.innerHTML = "<strong>Read:</strong> Read";
              const markButton = notificationCard.querySelector(".mark-read-button");
              if (markButton) markButton.remove();
            } else {
              console.warn(`Notification card with ID ${notificationId} not found in DOM`);
            }
          } else {
            showNotification(result.message || "Error marking notification as read", "error");
          }
        } catch (error) {
          console.error("Mark notification error:", error);
          showNotification("Failed to mark notification as read. Please try again.", "error");
        }
      }

      async function removeSavedProperty(propertyId) {
        console.log("Removing saved property:", { propertyId });
        try {
          const response = await fetch("/tenant/saved-property", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ propertyId, action: "remove" }),
          });
          if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
          }
          const result = await response.json();
          console.log("Remove property response:", result);
          if (result.success) {
            showNotification(result.message || "Property removed successfully", "success");
            const propertyCard = document.querySelector(`.property-card[data-property-id="${propertyId}"]`);
            if (propertyCard) {
              propertyCard.remove();
            } else {
              console.warn(`Property card with ID ${propertyId} not found in DOM`);
            }
          } else {
            showNotification(result.message || "Error removing property", "error");
          }
        } catch (error) {
          console.error("Remove property error:", error);
          showNotification("Failed to remove property. Please try again.", "error");
        }
      }

      async function checkRecentPayment() {
        console.log("Checking recent payment");
        try {
          const response = await fetch("/tenant/check-recent-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const result = await response.json();
          console.log("Check recent payment response:", result);
          if (result.success && !result.recentPayment) {
            showPaymentPopup();
          } else {
            showNotification(result.message || "You have already paid this month's rent", "error");
          }
        } catch (error) {
          console.error("Check recent payment error:", error);
          showNotification("Error checking payment status", "error");
        }
      }

      function showPaymentPopup() {
        const popup = document.getElementById("payment-popup-container");
        if (popup) {
          popup.style.display = "flex";
        }
      }

      function closePaymentPopup() {
        const popup = document.getElementById("payment-popup-container");
        if (popup) {
          popup.style.display = "none";
        }
      }

      function addNewRequest(request) {
        const activeRequestsContainer = document.querySelector(".maintenance-cards");
        if (activeRequestsContainer) {
          const newCard = document.createElement("div");
          newCard.className = "maintenance-card";
          newCard.innerHTML = `
            <div class="maintenance-header">
              <h5>${request.issueType || 'Unknown'} Issue</h5>
              <span class="status pending">Pending</span>
            </div>
            <p><strong>Date Reported:</strong> ${request.dateReported ? new Date(request.dateReported).toLocaleDateString() : 'N/A'}</p>
            <p><strong>Description:</strong> ${request.description || 'N/A'}</p>
            <p><strong>Location:</strong> ${request.location || 'N/A'}</p>
            ${request.scheduledDate ? `<p><strong>Preferred Date:</strong> ${new Date(request.scheduledDate).toLocaleDateString()}</p>` : ""}
            <p><strong>Assigned To:</strong> Awaiting assignment</p>
            <button class="small-button">Update</button>
          `;
          activeRequestsContainer.insertBefore(newCard, activeRequestsContainer.firstChild);
        }
      }

      function addNewComplaint(complaint) {
        const complaintsContainer = document.querySelector(".complaints-history");
        if (complaintsContainer) {
          const newItem = document.createElement("div");
          newItem.className = "complaint-item";
          newItem.innerHTML = `
            <div class="complaint-header">
              <h5>${complaint.subject || 'N/A'}</h5>
              <span class="status open">Open</span>
            </div>
            <p><strong>Date:</strong> ${complaint.dateSubmitted ? new Date(complaint.dateSubmitted).toLocaleDateString() : 'N/A'}</p>
            <p><strong>Description:</strong> ${complaint.description || 'N/A'}</p>
          `;
          complaintsContainer.insertBefore(newItem, complaintsContainer.firstChild);
        }
      }

      function addNewReview(rating) {
        const reviewsContainer = document.querySelector(".past-reviews");
        if (reviewsContainer) {
          const newCard = document.createElement("div");
          newCard.className = "review-card";
          newCard.innerHTML = `
            <div class="review-header">
              <h5>${rating.propertyId && rating.propertyId.name ? rating.propertyId.name : 'Unknown Property'}</h5>
              <div class="rating">${rating.rating ? "⭐".repeat(rating.rating) : ''} ${rating.rating ? rating.rating.toFixed(1) : 'N/A'}</div>
            </div>
            <p class="review-date">Reviewed on: ${rating.date ? new Date(rating.date).toLocaleDateString() : 'N/A'}</p>
            <p class="review-text">${rating.review || 'No review provided'}</p>
          `;
          reviewsContainer.insertBefore(newCard, reviewsContainer.firstChild);
        }
      }

      function addNewPayment(payment) {
        const paymentTableBody = document.querySelector(".payment-history tbody");
        if (paymentTableBody) {
          const newRow = document.createElement("tr");
          newRow.innerHTML = `
            <td>${payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : 'N/A'}</td>
            <td>₹${payment.amount || 'N/A'}</td>
            <td>${payment.paymentMethod || 'N/A'}</td>
            <td class="${payment.status ? payment.status.toLowerCase() : ''}">${payment.status || 'N/A'}</td>
            <td><a href="${payment.receiptUrl || '#'}">View</a></td>
          `;
          paymentTableBody.insertBefore(newRow, paymentTableBody.firstChild);
        }
      }

      document.addEventListener("DOMContentLoaded", function () {
        const overlay = document.getElementById("overlay");
        if (overlay) {
          overlay.addEventListener("click", function () {
            const navMenu = document.getElementById("nav-menu");
            if (navMenu) {
              navMenu.classList.remove("active");
              overlay.classList.remove("active");
            }
          });
        }

        const popup = document.getElementById("maintenance-request-popup");
        const bookButton = document.querySelector(".book-button");
        const closeBtn = document.querySelector(".close-btn");
        const maintenanceForm = document.getElementById("maintenance-request-form");
        const complaintForm = document.getElementById("complaint-form");
        const reviewForm = document.getElementById("review-submission");
        const profileForm = document.getElementById("profile-form");
        const passwordForm = document.getElementById("password-form");
        const notificationForm = document.getElementById("notification-form");
        const paymentForm = document.getElementById("payment-form");

        if (bookButton) {
          bookButton.addEventListener("click", function () {
            if (popup) popup.style.display = "flex";
          });
        }

        if (closeBtn) {
          closeBtn.addEventListener("click", function () {
            if (popup) popup.style.display = "none";
          });
        }

        if (popup) {
          window.addEventListener("click", function (event) {
            if (event.target === popup) {
              popup.style.display = "none";
            }
          });
        }

        if (maintenanceForm) {
          maintenanceForm.addEventListener("submit", async function () {
            const issueType = document.getElementById("issue-type")?.value;
            const description = document.getElementById("description")?.value;
            const location = document.getElementById("location")?.value;
            const preferredDate = document.getElementById("preferred-date")?.value;

            console.log("Submitting maintenance request:", { issueType, description, location, preferredDate });
            try {
              const response = await fetch("/tenant/maintenance", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  issueType,
                  description,
                  location,
                  preferredDate,
                }),
              });
              const result = await response.json();
              console.log("Maintenance response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                addNewRequest(result.request);
                maintenanceForm.reset();
                if (popup) popup.style.display = "none";
              } else {
                showNotification(result.message || "Error submitting request", "error");
              }
            } catch (error) {
              console.error("Maintenance form error:", error);
              showNotification("Error submitting request", "error");
            }
          });
        }

        if (complaintForm) {
          complaintForm.addEventListener("submit", async function () {
            const category = complaintForm.querySelector("select")?.value;
            const subject = complaintForm.querySelector("input")?.value;
            const description = complaintForm.querySelector("textarea")?.value;

            console.log("Submitting complaint:", { category, subject, description });
            try {
              const response = await fetch("/tenant/complaint", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ category, subject, description }),
              });
              const result = await response.json();
              console.log("Complaint response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                addNewComplaint(result.complaint);
                complaintForm.reset();
              } else {
                showNotification(result.message || "Error submitting complaint", "error");
              }
            } catch (error) {
              console.error("Complaint form error:", error);
              showNotification("Error submitting complaint", "error");
            }
          });
        }

        if (reviewForm) {
          reviewForm.addEventListener("click", async function () {
            const starRating = document.getElementById("star-rating");
            const reviewText = document.getElementById("review-text");
            if (!starRating || !reviewText) return;
            const propertyId = starRating.dataset.propertyId;
            const rating = selectedRating;
            const review = reviewText.value;

            if (!rating) {
              showNotification("Please select a rating", "error");
              return;
            }

            console.log("Submitting review:", { propertyId, rating, review });
            try {
              const response = await fetch("/tenant/review", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ propertyId, rating, review }),
              });
              const result = await response.json();
              console.log("Review response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                addNewReview(result.rating);
                reviewText.value = "";
                selectedRating = 0;
                updateStarDisplay(0, true);
              } else {
                showNotification(result.message || "Error submitting review", "error");
              }
            } catch (error) {
              console.error("Review form error:", error);
              showNotification("Error submitting review", "error");
            }
          });
        }

        if (profileForm) {
          profileForm.addEventListener("submit", async function () {
            const fullname = document.getElementById("fullname")?.value.trim();
            const email = document.getElementById("email")?.value.trim();
            const phone = document.getElementById("phone")?.value.trim();
            const location = document.getElementById("address")?.value.trim();

            if (!fullname || !email) {
              showNotification("Full name and email are required", "error");
              return;
            }
            const nameParts = fullname.split(" ").filter(part => part);
            if (nameParts.length < 2) {
              showNotification("Please provide both first and last names", "error");
              return;
            }
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
              showNotification("Please provide a valid email address", "error");
              return;
            }

            const firstName = nameParts[0];
            const lastName = nameParts.slice(1).join(" ");

            console.log("Submitting profile update:", { firstName, lastName, email, phone, location });
            try {
              const response = await fetch("/tenant/profile", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  firstName,
                  lastName,
                  email,
                  phone,
                  location,
                }),
              });
              const result = await response.json();
              console.log("Profile update response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                document.getElementById("fullname").value = `${result.user.firstName} ${result.user.lastName}`;
                document.getElementById("email").value = result.user.email;
                document.getElementById("phone").value = result.user.phone || '';
                document.getElementById("address").value = result.user.location || '';
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                showNotification(result.message || "Error updating profile", "error");
              }
            } catch (error) {
              console.error("Profile form error:", error);
              showNotification("Error updating profile", "error");
            }
          });
        }

        if (passwordForm) {
          passwordForm.addEventListener("submit", async function () {
            const currentPassword = document.getElementById("current-password")?.value;
            const newPassword = document.getElementById("new-password")?.value;
            const confirmPassword = document.getElementById("confirm-password")?.value;

            if (!currentPassword || !newPassword || !confirmPassword) {
              showNotification("All password fields are required", "error");
              return;
            }
            if (newPassword !== confirmPassword) {
              showNotification("New passwords do not match", "error");
              return;
            }
            if (newPassword.length < 6) {
              showNotification("New password must be at least 6 characters", "error");
              return;
            }

            console.log("Submitting password change:", { currentPassword, newPassword });
            try {
              const response = await fetch("/tenant/password", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ currentPassword, newPassword }),
              });
              const result = await response.json();
              console.log("Password change response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                passwordForm.reset();
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                showNotification(result.message || "Error changing password", "error");
              }
            } catch (error) {
              console.error("Password form error:", error);
              showNotification("Error changing password", "error");
            }
          });
        }

        if (notificationForm) {
          notificationForm.addEventListener("submit", async function () {
            const emailNotifications = document.getElementById("email-notifications")?.checked;
            const smsNotifications = document.getElementById("sms-notifications")?.checked;
            const rentReminders = document.getElementById("rent-reminders")?.checked;
            const maintenanceUpdates = document.getElementById("maintenance-updates")?.checked;
            const newListings = document.getElementById("new-listings")?.checked;

            console.log("Submitting notification preferences:", {
              emailNotifications,
              smsNotifications,
              rentReminders,
              maintenanceUpdates,
              newListings,
            });
            try {
              const response = await fetch("/tenant/notifications", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  emailNotifications,
                  smsNotifications,
                  rentReminders,
                  maintenanceUpdates,
                  newListings,
                }),
              });
              const result = await response.json();
              console.log("Notification preferences response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                document.getElementById("email-notifications").checked = result.user.emailNotifications;
                document.getElementById("sms-notifications").checked = result.user.smsNotifications;
                document.getElementById("rent-reminders").checked = result.user.rentReminders;
                document.getElementById("maintenance-updates").checked = result.user.maintenanceUpdates;
                document.getElementById("new-listings").checked = result.user.newListings;
                showSection('settings');
                window.location.hash = 'settings';
              } else {
                showNotification(result.message || "Error updating preferences", "error");
              }
            } catch (error) {
              console.error("Notification form error:", error);
              showNotification("Error updating preferences", "error");
            }
          });
        }

        if (paymentForm) {
          paymentForm.addEventListener("submit", async function () {
            const amount = document.getElementById("rent-amount")?.value;
            const paymentMethod = document.getElementById("payment-method")?.value;
            const transactionId = document.getElementById("transaction-id")?.value;

            console.log("Submitting payment:", { amount, paymentMethod, transactionId });
            try {
              const response = await fetch("/tenant/payment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  amount,
                  paymentMethod,
                  transactionId,
                }),
              });
              const result = await response.json();
              console.log("Payment response:", result);
              if (result.success) {
                showNotification(result.message, "success");
                addNewPayment(result.payment);
                paymentForm.reset();
                closePaymentPopup();
                const currentRentDiv = document.querySelector(".current-rent p");
                if (currentRentDiv) {
                  currentRentDiv.innerHTML = "<p>No rent due date available.</p>";
                }
              } else {
                showNotification(result.message || "Error processing payment", "error");
              }
            } catch (error) {
              console.error("Payment form error:", error);
              showNotification("Error processing payment", "error");
            }
          });
        }

        document.addEventListener("click", async (event) => {
          if (event.target.classList.contains("mark-read-button")) {
            const notificationId = event.target.dataset.notificationId;
            if (notificationId) {
              await markNotificationAsRead(notificationId);
            }
          }
          if (event.target.classList.contains("remove-button")) {
            const propertyId = event.target.dataset.propertyId;
            if (propertyId) {
              await removeSavedProperty(propertyId);
            }
          }
        });

       const stars = document.querySelectorAll("#star-rating .star");
let selectedRating = 0;

stars.forEach((star, index) => {
  star.addEventListener("mouseenter", () => {
    updateStarDisplay(index + 1, false);
  });
  
  star.addEventListener("click", () => {
    selectedRating = index + 1;
    updateStarDisplay(selectedRating, true);
    stars.forEach((s, i) => {
      s.classList.toggle("active", i <= index);
    });
  });
});

document.getElementById("star-rating").addEventListener("mouseleave", () => {
  updateStarDisplay(selectedRating, true);
});

function updateStarDisplay(rating, isPermanent) {
  stars.forEach((star, index) => {
    const icon = star.querySelector("i");
    if (index < rating) {
      icon.className = "fas fa-star";
      if (isPermanent) {
        star.classList.add("active");
      }
    } else {
      icon.className = "far fa-star";
      if (isPermanent) {
        star.classList.remove("active");
      }
    }
  });
}

        if (window.location.hash === '#settings') {
          showSection('settings');
        } else {
          showSection('home');
        }

        document.querySelectorAll('form').forEach(form => {
          form.addEventListener('submit', (event) => {
            event.preventDefault();
            event.stopPropagation();
          });
        });
        // Add this inside your existing document.addEventListener("DOMContentLoaded", function () {

// Worker Payment Form Handler
const workerPaymentForm = document.getElementById('worker-payment-form');
  if (workerPaymentForm) {
    workerPaymentForm.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      const workerId = document.getElementById('worker-id')?.value;
      const workerName = document.getElementById('worker-name')?.value;
      const serviceType = document.getElementById('service-type')?.value;
      const amount = document.getElementById('payment-amount')?.value;
      const paymentDate = document.getElementById('payment-date')?.value;
      const paymentMethod = document.getElementById('worker-payment-method')?.value;
      const transactionId = document.getElementById('worker-transaction-id')?.value || 'N/A';
      const notes = document.getElementById('payment-notes')?.value || '';
      
      // Validate ONLY the required fields that exist in the form
      if (!workerId || !amount || !paymentDate || !paymentMethod) {
        showNotification('Please fill in all required fields', 'error');
        return;
      }
      
      const paymentData = {
        workerId,
        workerName,
        serviceType,
        amount: parseFloat(amount),
        paymentDate,
        paymentMethod,
        transactionId,
        notes
      };
      
      console.log('Submitting worker payment:', paymentData);
      try {
        const response = await fetch('/tenant/worker-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(paymentData)
        });
        
        const result = await response.json();
        console.log('Worker payment response:', result);
        
        if (result.success) {
          showNotification(result.message || 'Payment processed successfully', 'success');
          addWorkerPaymentToHistory(result.payment);
          updateWorkerPaymentStatus(paymentData.workerId, 'paid');
          closeWorkerPaymentPopup();
          // Reload to refresh worker card
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showNotification(result.message || 'Error processing payment', 'error');
        }
      } catch (error) {
        console.error('Worker payment error:', error);
        showNotification('Failed to process payment. Please try again.', 'error');
      }
    });
  }
});

// Worker Payment Popup Event Listeners
const workerPaymentPopup = document.getElementById('worker-payment-popup');
if (workerPaymentPopup) {
  window.addEventListener('click', function(event) {
    if (event.target === workerPaymentPopup) {
      closeWorkerPaymentPopup();
    }
  });
}

// Enhance existing worker cards with payment functionality
const workerCards = document.querySelectorAll('.worker-card');
workerCards.forEach((card, index) => {
  // Add worker ID if not present
  if (!card.dataset.workerId) {
    card.dataset.workerId = `worker_${index + 1}`;
  }
});



      // Worker Payment Functions - Add these to your existing JavaScript

function showWorkerPaymentPopup(button) {
  const workerCard = button.closest('.worker-card');
  if (!workerCard) return;
  
  // Extract worker information from the card
  const workerName = workerCard.querySelector('.worker-name')?.textContent || 
                    workerCard.querySelector('h5')?.textContent || '';
  const serviceType = workerCard.querySelector('.worker-service')?.textContent || 
                     workerCard.querySelector('p:nth-child(2)')?.textContent.replace('Service: ', '') || '';
  const workerFee = workerCard.querySelector('.worker-fee')?.textContent || 
                   workerCard.querySelector('p:nth-child(4)')?.textContent.match(/₹(\d+)/)?.[1] || '';
  const workerId = workerCard.dataset.workerId || button.dataset.workerId;
  
  // Populate the popup form with ONLY the fields that exist
  document.getElementById('worker-name').value = workerName;
  document.getElementById('worker-id').value = workerId;
  document.getElementById('service-type').value = serviceType;
  document.getElementById('payment-amount').value = workerFee;
  
  // Set today's date automatically
  const today = new Date().toISOString().split('T')[0];
  document.getElementById('payment-date').value = today;
  
  // Show the popup
  const popup = document.getElementById('worker-payment-popup');
  if (popup) {
    popup.style.display = 'flex';
  }
}

function closeWorkerPaymentPopup() {
  const popup = document.getElementById('worker-payment-popup');
  if (popup) {
    popup.style.display = 'none';
    document.getElementById('worker-payment-form').reset();
  }
}

async function checkRecentWorkerPayment(workerId) {
  console.log('Checking recent worker payment for:', workerId);
  try {
    const response = await fetch('/tenant/check-recent-worker-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ workerId })
    });
    const result = await response.json();
    console.log('Check recent worker payment response:', result);
    return result;
  } catch (error) {
    console.error('Check recent worker payment error:', error);
    showNotification('Error checking payment status', 'error');
    return { success: false };
  }
}

function addWorkerPaymentToHistory(payment) {
  const historyTableBody = document.getElementById('worker-payment-history-body');
  if (historyTableBody) {
    const newRow = document.createElement('tr');
    newRow.innerHTML = `
      <td>${payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : new Date().toLocaleDateString()}</td>
      <td>${payment.workerName || 'N/A'}</td>
      <td>${payment.serviceType || 'N/A'}</td>
      <td>₹${payment.amount || 'N/A'}</td>
      <td>${payment.paymentMethod || 'N/A'}</td>
      <td class="${payment.status ? payment.status.toLowerCase() : 'completed'}">${payment.status || 'Completed'}</td>
      <td><a href="${payment.receiptUrl || '#'}" ${payment.receiptUrl ? '' : 'style="pointer-events:none;color:#ccc;"'}>View</a></td>
    `;
    historyTableBody.insertBefore(newRow, historyTableBody.firstChild);
  }
}

function updateWorkerPaymentStatus(workerId, status) {
  const workerCard = document.querySelector(`.worker-card[data-worker-id="${workerId}"]`);
  if (workerCard) {
    const statusElement = workerCard.querySelector('.payment-status');
    const lastPaymentElement = workerCard.querySelector('.last-payment-date');
    const payButton = workerCard.querySelector('.pay-worker-btn');
    
    if (statusElement) {
      statusElement.className = `payment-status status-${status}`;
      statusElement.textContent = status.charAt(0).toUpperCase() + status.slice(1);
    }
    
    if (lastPaymentElement) {
      lastPaymentElement.textContent = new Date().toLocaleDateString();
    }
    
    if (payButton && status === 'paid') {
      payButton.disabled = true;
      payButton.textContent = 'Paid';
    }
  }
}

function viewWorkerProfile(button) {
  const workerCard = button.closest('.worker-card');
  const workerId = workerCard?.dataset.workerId || button.dataset.workerId;
  if (workerId) {
    window.location.href = `/worker-profile?id=${workerId}`;
  }
}

async function loadWorkerPaymentHistory() {
  try {
    const response = await fetch('/tenant/worker-payment-history');
    const result = await response.json();
    
    if (result.success && result.payments) {
      const historyTableBody = document.getElementById('worker-payment-history-body');
      if (historyTableBody) {
        historyTableBody.innerHTML = '';
        result.payments.forEach(payment => {
          addWorkerPaymentToHistory(payment);
        });
      }
    }
  } catch (error) {
    console.error('Error loading worker payment history:', error);
  }
}

// Override the existing showSection function to handle worker payment history
const originalShowSection = showSection;
showSection = function(sectionId) {
  originalShowSection(sectionId);
  
  // Load worker payment history when movers section is shown
  if (sectionId === 'movers') {
    setTimeout(() => {
      loadWorkerPaymentHistory();
    }, 100);
  }
};
    </script>
  </body>
</html>