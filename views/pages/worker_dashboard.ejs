
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Domestic Worker Dashboard - RentEase</title>
    <link rel="stylesheet" href="css/domestic_worker_dahboard.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
      integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <%- include('../partials/header') %>
    <button class="menu-toggle" onclick="toggleMenu()">
      <strong>></strong>
    </button>

    <!-- Add overlay div for mobile menu -->
    <div id="overlay"></div>

    <div class="dashboard-container">
      <div class="sidebar">
        <h2>Worker Dashboard</h2>
        <h2><%= user.firstName %> <%= user.lastName %></h2>
        <ul>
          <li onclick="showSection('services')"><i class="fa-solid fa-rectangle-list"></i> My Services</a></li>
          <li onclick="showSection('bookings')"><i class="fa-solid fa-clipboard-list" id="mybooking_icon"></i> My Bookings</a></li>
          <li onclick="showSection('clients')"><i class="fa-solid fa-users"></i> My Clients</a></li>
          <li onclick="showSection('earnings')"><i class="fa-solid fa-hand-holding-dollar"></i> Earnings</a></li>
          <li onclick="showSection('reviews')"><i class="fa-solid fa-star-half-stroke"></i> Reviews & Ratings</a></li>
          <li onclick="showSection('settings')"><i class="fa-solid fa-gears"></i> Settings</a></li>
          <li onclick="showSection('notifications')"><i class="fa-solid fa-bell"></i>Notifications</li>
        </ul>
      </div>

      <div class="main-content">
        <div id="services" class="section active">
          <h3>My Services</h3>
          <div id="prop_container">
            <% if (user.serviceType && services && services.length > 0) { %>
              <% services.forEach(service => { %>
                <div id="gs_container" class="after_scroll_container">
                  <div class="sc_image_cotainer">
                    <img src="<%= service.image || '/images/default_service.jpg' %>" class="sc_image" />
                  </div>
                  <div class="main_sen"><%= service.name %></div>
                  <div class="sc_text">
                    <div class="prop_details">
                      <ul>
                        <li><strong>Rate : </strong>₹<%= service.price %> <%= service.rateUnit %></li>
                        <li><strong>Experience :</strong> <%= service.experience %> years</li>
                        <li><strong>Status :</strong> <%= service.serviceStatus %></li>
                      </ul>
                    </div>
                    <div id="prop_view">
                      <button class="prop_button" onclick="viewServiceDetails('<%= user._id %>')">Service Details</button>
                      <button class="prop_button" onclick="toggleServiceAvailability('<%= user._id %>')">Toggle Availability</button>
                      <button class="prop_button" onclick="deleteService()">Delete Service</button>
                    </div>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <p>No services available. Update your profile to add a service.</p>
            <% } %>
          </div>
          <button class="add-button" onclick="location.href='/worker_register'">Update Profile</button>
        </div>

        <!-- Bookings Section -->
        <div id="bookings" class="section">
          <h3>My Bookings</h3>
          <div class="complaint_container">
            <% bookings.forEach(booking => { %>
              <div class="res_complaint">
                <ul>
                  <strong><li><%= booking.serviceName || 'Service' %></li></strong>
                  <ul>
                    <li><strong>Client: </strong><%= booking.tenantId.firstName %> <%= booking.tenantId.lastName %></li>
                    <li><strong>Address: </strong><%= booking.propertyId.address %></li>
                    <li><strong>Date: </strong><%= booking.date %></li>
                    <li><strong>Time: </strong><%= booking.time %></li>
                    <li><strong>Status: </strong><%= booking.status %></li>
                  </ul>
                </ul>
                <% if (booking.status === 'Pending') { %>
                  <button class="update_sts" onclick="updateBookingStatus('<%= booking._id %>', 'Approved')">Accept Booking</button>
                  <button class="update_sts" onclick="updateBookingStatus('<%= booking._id %>', 'Declined')">Decline Booking</button>
                <% } else if (booking.status === 'Approved') { %>
                  <!-- <button class="update_sts" onclick="updateBookingStatus('<%= booking._id %>', 'Completed')">Mark as Complete</button> -->
                <% } %>
              </div>
            <% }) %>
          </div>
        </div>

        <!-- Clients Section -->
        <div id="clients" class="section">
  <h3>My Clients</h3>
  
  <% if (clients && clients.length > 0) { %>
    <div class="messages">
      <% clients.forEach(client => { %>
        <div class="tentant_details" data-client-id="<%= client._id %>">
          <ul>
            <li><strong><%= client.firstName %> <%= client.lastName %></strong></li>
            <li>
              <strong>Services: </strong>
              <% if (client.services && client.services.length > 0) { %>
                <%= client.services.join(', ') %>
              <% } else { %>
                No services specified
              <% } %>
            </li>
            <li><strong>Contact: </strong><%= client.phone || 'N/A' %></li>
            <li><strong>Email: </strong><%= client.email || 'N/A' %></li>
            <% if (client.bookingDate) { %>
              <li><strong>Booked Since: </strong><%= new Date(client.bookingDate).toLocaleDateString() %></li>
            <% } %>
          </ul>
        </div>
      <% }) %>
    </div>
  <% } else { %>
    <div class="no-clients-message">
      <p>You currently have no active clients.</p>
      <p>When tenants book your services and you approve them, they will appear here.</p>
    </div>
  <% } %>
</div>

        <div id="earnings" class="section">
          <h3>My Earnings</h3>
          <p>This Month's Earnings: <strong>₹<%= earnings.monthly || 0 %></strong></p>
          <p>Pending Payments: <strong>₹<%= earnings.pending || 0 %></strong></p>
          <div class="complaint_container">
            <% if (transactions && transactions.length > 0) { %>
              <% transactions.forEach(transaction => { %>
                <div class="res_complaint">
                  <ul>
                    <strong><li><%= transaction.title %></li></strong>
                    <ul>
                      <li><strong>Service:</strong> <%= transaction.serviceName %></li>
                      <li><strong>Client:</strong> <%= transaction.clientName %></li>
                      <li><strong><%= transaction.period ? 'Period' : 'Date' %>:</strong> <%= transaction.period || transaction.date %></li>
                      <li><strong>Amount:</strong> ₹<%= transaction.amount %></li>
                      <li><strong>Status:</strong> <%= transaction.status %></li>
                    </ul>
                  </ul>
                </div>
              <% }) %>
            <% } else { %>
              <p>No transactions available.</p> 
            <% } %>
          </div>
          <button class="pay-button">View All Transactions</button>
        </div>

        <div id="reviews" class="section">
          <h3>Reviews & Ratings</h3>
          <p>Overall Rating: <strong><%= reviews.averageRating || 0 %>/5</strong> (<%= reviews.count || 0 %> reviews)</p>
          <div class="complaint_container">
            <% if (reviews.items && reviews.items.length > 0) { %>
              <% reviews.items.forEach(review => { %>
                <div class="res_complaint">
                  <ul>
                    <strong><li><%= review.user %> - <%= '⭐'.repeat(review.rating) %></li></strong>
                    <ul>
                      <li><strong>Service:</strong> <%= review.serviceName %></li>
                      <li><strong>Date:</strong> <%= review.date %></li>
                      <li><strong>Comment:</strong> <%= review.comment %></li>
                    </ul>
                  </ul>
                </div>
              <% }) %>
            <% } else { %>
              <p>No reviews available.</p>
            <% } %>
          </div>
          <button class="report-button">View All Reviews</button>
        </div>

        <div id="notifications" class="section">
  <h3>Notifications</h3>
  <div class="notification-container">
    <% if (notifications && Array.isArray(notifications) && notifications.length > 0) { %>
      <% notifications.forEach(notification => { %>
        <div class="notification-card <%= notification.read ? 'read' : 'unread' %>" 
             data-notification-id="<%= notification._id %>">
          
          <% if (notification.type === 'Debooking') { %>
            <div class="notification-header debooking">
              <i class="fa-solid fa-user-xmark"></i>
              <strong>Debooking Notice</strong>
            </div>
          <% } else if (notification.type === 'Booking Update') { %>
            <div class="notification-header booking-update">
              <i class="fa-solid fa-calendar-check"></i>
              <strong>Booking Update</strong>
            </div>
          <% } else { %>
            <div class="notification-header general">
              <i class="fa-solid fa-bell"></i>
              <strong><%= notification.type || 'Notification' %></strong>
            </div>
          <% } %>
          
          <p><strong>Message:</strong> <%= notification.message %></p>
          
          <% if (notification.tenantName) { %>
            <p><strong>From:</strong> <%= notification.tenantName %></p>
          <% } %>
          
          <p><strong>Date:</strong> <%= new Date(notification.createdDate).toLocaleString() %></p>
          
          <p><strong>Status:</strong> 
            <span class="notification-status <%= notification.status ? notification.status.toLowerCase() : 'info' %>">
              <%= notification.status || 'Info' %>
            </span>
          </p>
        </div>
      <% }) %>
    <% } else { %>
      <p class="no-notifications">No notifications available.</p>
    <% } %>
  </div>
</div>

        <div id="settings" class="section">
          <h3>Account Settings</h3>
          <form id="settingsForm">
            <div class="settings-container">
              <div class="settings-section">
                <h4>Personal Information</h4>
                <div class="form-row">
                  <div class="form-group">
                    <label for="settingsFirstName">First Name</label>
                    <input
                      type="text"
                      id="settingsFirstName"
                      name="firstName"
                      placeholder="First name"
                      value="<%= user.firstName %>"
                    />
                    <div id="settingsFirstNameError" class="error"></div>
                  </div>
                  <div class="form-group">
                    <label for="settingsLastName">Last Name</label>
                    <input
                      type="text"
                      id="settingsLastName"
                      name="lastName"
                      placeholder="Last name"
                      value="<%= user.lastName %>"
                    />
                    <div id="settingsLastNameError" class="error"></div>
                  </div>
                </div>
                <div class="form-group">
                  <label for="settingsEmail">Email</label>
                  <input
                    type="email"
                    id="settingsEmail"
                    name="email"
                    placeholder="Enter your email"
                    value="<%= user.email %>"
                  />
                  <div id="settingsEmailError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsPhone">Phone Number</label>
                  <input
                    type="tel"
                    id="settingsPhone"
                    name="phone"
                    placeholder="Enter your phone number"
                    value="<%= user.phone %>"
                  />
                  <div id="settingsPhoneError" class="error"></div>
                </div>
              </div>
              <div class="settings-section">
                <h4>Worker Information</h4>
                <div class="form-group">
                  <label for="settingsLocation">Service Area</label>
                  <input
                    type="text"
                    id="settingsLocation"
                    name="location"
                    placeholder="City, State, Country"
                    value="<%= user.location %>"
                  />
                  <div id="settingsLocationError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsExperience">Years of Experience</label>
                  <input
                    type="number"
                    id="settingsExperience"
                    name="experience"
                    min="0"
                    placeholder="Years of experience"
                    value="<%= user.experience %>"
                  />
                </div>
                <div class="form-group">
                  <label for="settingsAvailability">Availability</label>
                  <select id="settingsAvailability" name="availability">
                    <option value="full-time" <%= user.availability === 'full-time' ? 'selected' : '' %>>Full Time</option>
                    <option value="part-time" <%= user.availability === 'part-time' ? 'selected' : '' %>>Part Time</option>
                    <option value="weekends" <%= user.availability === 'weekends' ? 'selected' : '' %>>Weekends Only</option>
                  </select>
                </div>
                <!-- <div class="form-group">
                  <label>Services Offered</label>
                  <div class="checkbox-group">
                    <input
                      type="checkbox"
                      id="cleaning"
                      name="cleaning"
                      <%= user.serviceType === 'cleaning' ? 'checked' : '' %>
                    />
                    <label for="cleaning">Home Cleaning</label>
                  </div>
                  <div class="checkbox-group">
                    <input
                      type="checkbox"
                      id="cooking"
                      name="cooking"
                      <%= user.serviceType === 'cooking' ? 'checked' : '' %>
                    />
                    <label for="cooking">Cooking</label>
                  </div>
                </div> -->
              </div>
              <div class="settings-section">
                <h4>Change Password</h4>
                <div class="form-group">
                  <label for="settingsCurrentPassword">Current Password</label>
                  <input
                    type="password"
                    id="settingsCurrentPassword"
                    name="currentPassword"
                    placeholder="Current password"
                  />
                  <div id="settingsCurrentPasswordError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsNewPassword">New Password</label>
                  <input
                    type="password"
                    id="settingsNewPassword"
                    name="newPassword"
                    placeholder="New password"
                  />
                  <div id="settingsNewPasswordError" class="error"></div>
                </div>
                <div class="form-group">
                  <label for="settingsConfirmPassword">Confirm New Password</label>
                  <input
                    type="password"
                    id="settingsConfirmPassword"
                    name="confirmPassword"
                    placeholder="Confirm new password"
                  />
                  <div id="settingsConfirmPasswordError" class="error"></div>
                </div>
              </div>
              <div class="settings-section">
                <h4>Notification Preferences</h4>
                <div class="checkbox-group">
                  <label for="emailNotifications">Email notifications</label>
                  <input
                    type="checkbox"
                    id="emailNotifications"
                    name="emailNotifications"
                    <%= user.emailNotifications ? 'checked' : '' %>
                  />
                  <label for="emailNotifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="smsNotifications">SMS notifications</label>
                  <input
                    type="checkbox"
                    id="smsNotifications"
                    name="smsNotifications"
                    <%= user.smsNotifications ? 'checked' : '' %>
                  />
                  <label for="smsNotifications" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="bookingAlerts">New booking alerts</label>
                  <input
                    type="checkbox"
                    id="bookingAlerts"
                    name="bookingAlerts"
                    <%= user.bookingAlerts ? 'checked' : '' %>
                  />
                  <label for="bookingAlerts" class="button"></label>
                </div>
                <div class="checkbox-group">
                  <label for="paymentAlerts">Payment alerts</label>
                  <input
                    type="checkbox"
                    id="paymentAlerts"
                    name="paymentAlerts"
                    <%= user.paymentAlerts ? 'checked' : '' %>
                  />
                  <label for="paymentAlerts" class="button"></label>
                </div>
              </div>
            </div>
            <div class="button-container">
              <button
                type="submit"
                id="saveSettingsBtn"
                class="settings-button primary-button"
              >
                Save Changes
              </button>
              <button
                type="button"
                id="cancelSettingsBtn"
                class="settings-button secondary-button"
              >
                Cancel
              </button>
              <button type="button" id="deleteAccountBtn" class="settings-button danger-button" onclick="deleteAccount()">Delete Account</button>
            </div>
          </form>
          <div id="settingsSuccessMessage" class="success-message">
            Your settings have been updated successfully!
          </div>
        </div>
      </div>
    </div>

    <script>
      // Safely access user data
      document.addEventListener('DOMContentLoaded', function() {
        try {
          const userData = <%- JSON.stringify(user || {}) %>;
          console.log('User data loaded:', userData);
        } catch (e) {
          console.error('Error loading user data:', e);
        }
      });

      function showSection(sectionId) {
        console.log("showSection called with ID:", sectionId);
        const sections = document.querySelectorAll(".section");
        console.log("Found sections:", sections.length);
        sections.forEach((section) => {
          section.classList.remove("active");
          section.style.display = "none"; // Fallback
        });
        const activeSection = document.getElementById(sectionId);
        if (activeSection) {
          console.log("Activating section:", sectionId);
          activeSection.classList.add("active");
          activeSection.style.display = "block"; // Fallback
        } else {
          console.error("Section not found for ID:", sectionId);
        }
        if (window.innerWidth <= 768) {
          console.log("Mobile view: hiding sidebar");
          document.querySelector(".sidebar").classList.remove("active");
          document.querySelector(".menu-toggle").innerHTML = "<strong>></strong>";
          document.getElementById("overlay").classList.remove("active");
        }
      }

      function toggleMenu() {
        const sidebar = document.querySelector(".sidebar");
        const menuButton = document.querySelector(".menu-toggle");
        sidebar.classList.toggle("active");
        if (sidebar.classList.contains("active")) {
          menuButton.innerHTML = "<strong><</strong>";
          document.getElementById("overlay").classList.add("active");
        } else {
          menuButton.innerHTML = "<strong>></strong>";
          document.getElementById("overlay").classList.remove("active");
        }
      }

      function toggleNav() {
        const navMenu = document.getElementById("nav-menu");
        const overlay = document.getElementById("overlay");
        if (navMenu) {
          navMenu.classList.toggle("active");
          overlay.classList.toggle("active");
        } else {
          console.warn("nav-menu not found");
        }
      }

      // Event listener for overlay
      document.getElementById("overlay").addEventListener("click", function () {
        const navMenu = document.getElementById("nav-menu");
        if (navMenu && navMenu.classList.contains("active")) {
          navMenu.classList.remove("active");
        }
        document.querySelector(".sidebar").classList.remove("active");
        document.querySelector(".menu-toggle").innerHTML = "<strong>></strong>";
        this.classList.remove("active");
      });

      function viewServiceDetails(workerId) {
        window.location.href = `/service/${workerId}`;
      }
     
      function toggleServiceAvailability(workerId) {
        fetch(`/api/workers/${workerId}/toggle`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert(`Service is now ${data.serviceStatus}`);
              location.reload();
            } else {
              alert('Error toggling availability: ' + data.error);
            }
          })
          .catch(error => {
            alert('Error toggling availability: ' + error.message);
          });
      }

      function deleteService() {
        if (confirm("Are you sure you want to delete your service? You can re-register later.")) {
          fetch("/api/workers/delete-service", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            }
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert("Service deleted successfully! Redirecting to dashboard.");
                window.location.reload();
              } else {
                alert("Error deleting service: " + data.error);
              }
            })
            .catch(error => {
              alert("Error deleting service: " + error.message);
            });
        }
      }
      
      function updateBookingStatus(bookingId, status) {
        // Show loading state or disable button
        const buttons = document.querySelectorAll(`button[onclick*="${bookingId}"]`);
        buttons.forEach(btn => {
          btn.disabled = true;
          btn.innerHTML = `Updating...`;
        });

        fetch(`/api/workers/bookings/${bookingId}/status`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status }),
        })
          .then(response => {
            if (!response.ok) {
              throw new Error(`Server responded with status ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              // Success notification
              alert(`Booking ${status.toLowerCase()} successfully!`);
              window.location.reload(); // Reload to reflect updated clients and bookings
            } else {
              // Error message from server
              alert(data.error || 'Unknown error updating booking status');
              // Re-enable buttons
              buttons.forEach(btn => btn.disabled = false);
            }
          })
          .catch(error => {
            console.error('Error updating booking status:', error);
            alert(`Failed to update booking status: ${error.message}`);
            // Re-enable buttons
            buttons.forEach(btn => btn.disabled = false);
          });
      }
    
      function viewMessages(clientId) {
        window.location.href = `/worker/messages/${clientId}`;
      }

      // Handle settings form submission
      // Handle settings form submission
document.getElementById('settingsForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  // Collect form data
  const formData = {
    firstName: document.getElementById('settingsFirstName').value,
    lastName: document.getElementById('settingsLastName').value,
    email: document.getElementById('settingsEmail').value,
    phone: document.getElementById('settingsPhone').value,
    location: document.getElementById('settingsLocation').value,
    experience: document.getElementById('settingsExperience').value,
    availability: document.getElementById('settingsAvailability').value,
    serviceType: document.getElementById('cleaning').checked ? 'cleaning' : 
                document.getElementById('cooking').checked ? 'cooking' : '',
  };
  
  // Handle password change if new password is provided
  const currentPassword = document.getElementById('settingsCurrentPassword').value;
  const newPassword = document.getElementById('settingsNewPassword').value;
  const confirmPassword = document.getElementById('settingsConfirmPassword').value;
  
  if (newPassword) {
    if (newPassword !== confirmPassword) {
      alert('New passwords do not match');
      return;
    }
    formData.currentPassword = currentPassword;
    formData.newPassword = newPassword;
  }
  
  // Send data to server
  fetch('/api/workers/update-settings', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('settingsSuccessMessage').style.display = 'block';
      setTimeout(function() {
        document.getElementById('settingsSuccessMessage').style.display = 'none';
      }, 3000);
    } else {
      alert('Error updating settings: ' + data.error);
    }
  })
  .catch(error => {
    alert('Error updating settings: ' + error.message);
  });
});
      // Handle cancel button click
      document.getElementById('cancelSettingsBtn').addEventListener('click', function() {
        if (confirm('Are you sure you want to discard your changes?')) {
          window.location.reload();
        }
      });

      function deleteAccount() {
        // First, check if the worker is booked
        fetch(`/api/workers/check-booked/<%= user._id %>`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
          .then(response => {
            if (response.status === 403 || response.status === 401) {
              window.location.href = '/login';
              return;
            }
            return response.json();
          })
          .then(data => {
            if (!data) return; // Exit if redirected
            if (data.isBooked) {
              alert('Cannot delete account: You are currently working.');
              return;
            }

            // If not booked, prompt for password
            const password = prompt('Please enter your password to confirm account deletion:');
            if (!password) {
              alert('Password is required to delete your account.');
              return;
            }

            // Confirm deletion
            if (confirm('Are you sure you want to permanently delete your account? This action cannot be undone.')) {
              fetch(`/api/workers/delete-account/<%= user._id %>`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ password })
              })
                .then(response => {
                  if (response.status === 403 || response.status === 401) {
                    window.location.href = '/login';
                    return;
                  }
                  return response.json();
                })
                .then(data => {
                  if (!data) return; // Exit if redirected
                  if (data.success) {
                    alert('Account deleted successfully. You will be redirected.');
                    window.location.href = '/logout';
                  } else {
                    alert('Error deleting account: ' + data.error);
                  }
                })
                .catch(error => {
                  alert('Error deleting account: ' + error.message);
                });
            }
          })
          .catch(error => {
            alert('Error checking booking status: ' + error.message);
          });
      }

      function markNotificationAsRead(notificationId) {
  fetch('/api/workers/notifications/read', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ notificationId })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const notificationCard = document.querySelector(`.notification-card[data-notification-id="${notificationId}"]`);
      if (notificationCard) {
        notificationCard.classList.remove('unread');
        notificationCard.classList.add('read');
        const markButton = notificationCard.querySelector('.mark-read-button');
        if (markButton) markButton.remove();
        const readStatus = notificationCard.querySelector('p:last-of-type');
        if (readStatus) readStatus.innerHTML = '<strong>Read:</strong> Read';
      }
      alert('Notification marked as read');
    } else {
      alert('Error marking notification as read: ' + data.error);
    }
  })
  .catch(error => {
    alert('Error marking notification as read: ' + error.message);
  });
}
    </script>
  </body>
</html>
